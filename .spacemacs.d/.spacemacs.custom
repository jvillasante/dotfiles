;; -*- mode: emacs-lisp -*-

(defun jv-comment-box (b e)
  "Draw a box comment around the region but arrange for the region to extend to at least the fill column. Place the point after the comment box."
  (interactive "r")
  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    (insert-char ?  (- fill-column (current-column)))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil)))

;; Don't use GTK dialogs, but use minibuffer/status instead
(setq use-dialog-box nil)

;; Display Visited File's Path in the Frame Title
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

(setq-default user-full-name "Julio C. Villasante"
              user-mail-address "jvillasantegomez@gmail.com"
              paradox-github-token t
              load-prefer-newer t
              fill-column 110                    ; Maximum line width
              truncate-lines t                   ; Don't fold lines
              truncate-partial-width-windows nil ; for vertically-split windows
              split-width-threshold 160          ; Split verticaly by default
              evil-cross-lines t                 ; Make horizontal movement cross lines

              ;; scroll
              scroll-margin 3

              ;; my coding style, bsd but with 2 spaces indentation (and no tab
              ;; characters, only spaces)
              c-basic-indent 2
              c-basic-offset 2
              tab-width 2
              indent-tabs-mode nil
              highlight-tabs t

              ;; Whitespace settings
              whitespace-action '(auto-cleanup)
              whitespace-style '(indentation::space
                                 space-after-tab
                                 space-before-tab
                                 trailing
                                 lines-tail
                                 tab-mark
                                 face
                                 tabs)

              doc-view-continuous t

              ;; tramp mode
              tramp-default-method "ssh"

              ;; LaTeX
              font-latex-fontify-script nil
              TeX-newline-function 'reindent-then-newline-and-indent)

;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
(setq utf-translate-cjk-mode nil)

(set-language-environment 'utf-8)
(setq locale-coding-system 'utf-8)

;; set the default encoding system
(prefer-coding-system 'utf-8)
(setq default-file-name-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp buffer-file-coding-system)
    (setq buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

;; multiterm
(setq multi-term-program "/usr/bin/zsh")
(add-hook 'term-mode-hook
          (lambda ()
            (setq term-buffer-maximum-size 10000)))

;; line spacing
(setq-default line-spacing 0.1)

;; Isearch convenience, space matches anything (non-greedy)
(setq search-whitespace-regexp ".*?")

(add-hook 'markdown-mode-hook
          (lambda ()
            (auto-fill-mode 0)
            (visual-line-mode 1)))
(add-hook 'prog-mode-hook
          (lambda ()
            (set-fill-column 110)
            (flyspell-prog-mode)))
(add-hook 'text-mode-hook 'turn-on-flyspell)
(add-hook 'makefile-mode-hook 'whitespace-mode)
(remove-hook 'prog-mode-hook 'spacemacs//show-trailing-whitespace)

;; use company everywhere
(add-hook 'after-init-hook 'global-company-mode)
(setq company-backends (delete 'company-semantic company-backends))

;; use evil-matchit everywhere
(global-evil-matchit-mode 1)

;; Make movement keys work like they should
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

;; use count-words instead of count-words-region as it works on buffer
;; if no region is selected
(global-set-key (kbd "M-=") 'count-words)

;; recentf - ignore some file
(require 'recentf)
(add-to-list 'recentf-exclude "/tmp/")
(add-to-list 'recentf-exclude "~/.Maildir/")

;; SLIME - SBCL (Common Lisp)
;; (setq inferior-lisp-program my-cl-path)
;; (setf slime-lisp-implementations
;;       `((sbcl ("ros" "-Q" "-l" "~/.sbclrc" "-L" "sbcl" "run"))
;;         (ccl  ("ros" "-Q" "-l" "~/.ccl-init.lisp" "-L" "ccl-bin" "run"))))
;; (setf slime-default-lisp 'sbcl)
;; (setq slime-net-coding-system 'utf-8-unix)

;; yasnippet
(spacemacs/set-leader-keys "si" 'yas/insert-snippet)
(spacemacs/set-leader-keys "sd" 'yas/describe-tables)

;; magit
(setq-default git-magit-status-fullscreen t)
(setq magit-completing-read-function 'magit-builtin-completing-read
      magit-push-always-verify nil)

;; deft
(setq deft-directory (concat my-dropbox-path "/Personal/notes")
      deft-default-extension "org"
      deft-extensions '("org")
      deft-recursive t
      deft-text-mode 'org-mode
      deft-use-filename-as-title t
      deft-use-filter-string-for-filename t
      deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase))
      deft-auto-save-interval 0)

;; neotree
(setq neo-theme 'ascii)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(neo-banner-face ((t :inherit shadow :underline nil)))
 '(neo-button-face ((t :inherit dired-directory :underline nil)))
 '(neo-dir-link-face ((t :inherit dired-directory :underline nil)))
 '(neo-expand-btn-face ((t :inherit button :underline nil)))
 '(neo-file-link-face ((t :inherit default :underline nil)))
 '(neo-header-face ((t :inherit shadow :underline nil)))
 '(neo-root-dir-face ((t :inherit link-visited :underline nil))))

;; search engine
(setq browse-url-browser-function 'browse-url-generic
      engine/browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")

;; Dired customisation
(setq projectile-switch-project-action 'projectile-dired) ; dired loads on project switch
(setq dired-listing-switches "-alh")
(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
(define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))
(evil-leader/set-key
  "od" 'dired)
