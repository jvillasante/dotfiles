#!/usr/bin/env bash

readonly WS_WAYLAND="Wayland"
readonly WS_X11="X11"
readonly WM_KDE="KDE"
readonly WM_GNOME="Gnome"
readonly WM_I3="I3"
readonly WM_SWAY="Sway"
WINDOW_SYSTEM="$WS_WAYLAND"
WINDOW_MANAGER="$WM_KDE"

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 install:"
    echo "        Install Ubuntu System ($WS_WAYLAND|WS_X11) ($WM_KDE|$WM_GNOME|$WM_I3|$WM_SWAY)"
    echo
    echo " e.g: $0 install"
    exit "$1"
}

install_berkeley_mono_font() {
    [ ! -d "$(pwd)"/fonts ] && notify-send "$(pwd)/fonts is not a directory" --expire-time=20 && return
    [ ! -f "$(pwd)"/fonts/berkeley-mono-typeface.tar.gz.gpg ] &&
        notify-send "$(pwd)/fonts/berkeley-mono-typeface.tar.gz.gpg does not exists" --expire-time=20 && return
    [ ! -f "$(pwd)"/../scripts/+crypt ] &&
        notify-send "$(pwd)/../scripts/+crypt script does not exists" --expire-time=20 && return
    [ ! -d "$HOME"/Workspace/Software/fonts ] && mkdir -p "$HOME"/Workspace/Software/fonts
    [ -d "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface ] &&
        rm -rf "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface

    # copy and decrypt Berkeley Mono typeface
    cp "$(pwd)"/fonts/berkeley-mono-typeface.tar.gz.gpg "$HOME"/Workspace/Software/fonts
    [ ! -f "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface.tar.gz.gpg ] &&
        notify-send "$HOME/Workspace/Software/fonts/berkeley-mono-typeface.tar.gz.gpg does not exists" \
                    --expire-time=20 && return
    "$(pwd)"/../scripts/+crypt -d "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface.tar.gz.gpg
    [ ! -d "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface ] &&
        notify-send "Decryption failed, $HOME/Workspace/Software/fonts/berkeley-mono-typeface does not exists" \
                    --expire-time=20 && return

    # just in case
    mkdir -p ~/.local/share/fonts

    # remove all fonts from ~/.local/share/fonts that start with "BerkeleyMono"
    rm -rf ~/.local/share/fonts/BerkeleyMono*

    # copy all ttf fonts to ~/.local/share/fonts
    find "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface -type f -name "*.ttf" \
         -exec cp {} "$HOME"/.local/share/fonts/ \; -print

    # Build font information caches
    fc-cache -f
}

ubuntu_install() {
    HEIGHT=25
    WIDTH=100
    CHOICE_HEIGHT=4
    BACKTITLE="Ubuntu Setup Util"
    TITLE="Please Make a selection"
    MENU="Please Choose one of the following options:"

    # Accept WS and WM for the installer to kick in
    read -rp "$BACKTITLE (WS=$WINDOW_SYSTEM and WM=$WINDOW_MANAGER)? (Y/N): " confirm
    [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || usage 1
    case $WINDOW_SYSTEM in
        "$WS_WAYLAND" | "$WS_X11") ;;
        *)
            echo "Error. Please select one of the supported Window Systems"
            usage 1
            ;;
    esac
    case $WINDOW_MANAGER in
        "$WM_KDE" | "$WM_GNOME" | "$WM_I3") ;;
        *)
            echo "Error. Please select one of the supported Window Managers"
            usage 1
            ;;
    esac
    if [ "$WINDOW_SYSTEM" = "$WS_WAYLAND" ] && [ "$WINDOW_MANAGER" = "$WM_I3" ]; then
        echo "Can't use $WM_I3 WM with $WS_WAYLAND, try $WM_SWAY instead..."
        usage 1
    fi

    # Check to see if dialog and libnotify are installed, if not install them
    type dialog 2> /dev/null || sudo apt install -y dialog
    type notify-send 2> /dev/null || sudo apt install -y libnotify-bin libnotify-dev

    # kick off the installer
    OPTIONS=(
        1 "Set Defaults - Set some defaults & update"
        2 "Install Firmware - Install Firmware Updates"
        3 "Install Nvidia Drivers - Install Nvidia Drivers"
        4 "Install Software - Installs a bunch of my most used software"
        5 "Install Extras - TLP, Fonts, etc"
        6 "Enable Flatpak - Enables the Flatpak repo and installs packages"
        7 "Setup Secrets and Repos - Setup ssh and gpg from backups and get git repos"
        8 "Install Emacs - Install Emacs29 from source"
        9 "Install Keyd - Install Keyd from source (using xremap at the moment, here for documentation only)"
        10 "Install Xkeysnail - Install Xkeysnail from source (using xremap at the moment, here for documentation only)"
        11 "Install Xremap - Install Xremap"
        12 "Quit")

    while true; do
        CHOICE=$(dialog --clear \
                        --backtitle "$BACKTITLE (WS=$WINDOW_SYSTEM and WM=$WINDOW_MANAGER)" \
                        --title "$TITLE" \
                        --nocancel \
                        --menu "$MENU" \
                        $HEIGHT $WIDTH $CHOICE_HEIGHT \
                        "${OPTIONS[@]}" 2>&1 > /dev/tty)
        clear
        case $CHOICE in
            1)
                echo "1) Setting Defaults"

                # hostname
                read -rp "Enter pretty hostname (defaults to 'Julio's Personal Laptop'): " HOSTNAME_PRETTY
                [ -z "$HOSTNAME_PRETTY" ] && HOSTNAME_PRETTY="Julio's Personal Laptop"
                hostnamectl set-hostname --pretty "$HOSTNAME_PRETTY"

                read -rp "Enter static hostname (defaults to 'ubuntu-xps-9710'): " HOSTNAME_STATIC
                [ -z "$HOSTNAME_STATIC" ] && HOSTNAME_STATIC="ubuntu-xps-9710"
                hostnamectl set-hostname --static "$HOSTNAME_STATIC"

                # xdg
                export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
                export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
                export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
                export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
                export XDG_LIB_HOME="${XDG_DATA_HOME:-$HOME/.local/lib}"
                mkdir -p \
                      "${XDG_CONFIG_HOME}" \
                      "${XDG_CACHE_HOME}" \
                      "${XDG_DATA_HOME}" \
                      "${XDG_STATE_HOME}" \
                      "${XDG_LIB_HOME}"

                # Folder structure
                mkdir -p "$HOME/.local/bin"
                mkdir -p "$HOME/Workspace"
                mkdir -p "$HOME/Workspace/Books"
                mkdir -p "$HOME/Workspace/Private/Projects"
                mkdir -p "$HOME/Workspace/Public"
                mkdir -p "$HOME/Workspace/Software"
                mkdir -p "$HOME/Workspace/Stuff"
                mkdir -p "$HOME/Workspace/Work"
                mkdir -p "$HOME/Workspace/Work/Projects"
                mkdir -p "$HOME/Workspace/Work/Software"
                mkdir -p "$HOME/Workspace/Work/Stuff"

                # Gnome Gsettings - dconf-editor
                #  - View current settings - gsettings list-recursively org.gnome.desktop.interface
                #  - Reset to default setting - gsettings reset org.gnome.desktop.interface enable-animations
                if [[ "$WINDOW_MANAGER" == "$WM_GNOME" ]]; then
                    # Clock Settings
                    gsettings set org.gnome.desktop.interface clock-format '12h'
                    gsettings set org.gnome.desktop.interface clock-show-date true
                    gsettings set org.gnome.desktop.interface clock-show-seconds false
                    gsettings set org.gnome.desktop.interface clock-show-weekday false

                    # No hot corners
                    gsettings set org.gnome.desktop.interface enable-hot-corners false

                    # Emacs please
                    gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'

                    # Show battery
                    gsettings set org.gnome.desktop.interface show-battery-percentage true

                    # Enable window buttons
                    gsettings set org.gnome.desktop.wm.preferences button-layout ':minimize,maximize,close'

                    # Set new windows centered
                    gsettings set org.gnome.mutter center-new-windows true

                    # Set list-view for Nautilius
                    gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'

                    # Force alt + tab to switch only on current workspace
                    gsettings set org.gnome.shell.app-switcher current-workspace-only true

                    # Set fractional scaling (only for wayland)
                    # gsettings set org.gnome.mutter experimental-features "['scale-monitor-framebuffer']"

                    # Stop Gnome Software downloading updates
                    # gsettings set org.gnome.software allow-updates false
                    # gsettings set org.gnome.software download-updates false
                    # gsettings set org.gnome.software download-updates-notify false
                fi

                # Update system with the new sources
                sudo apt update -y
                sudo apt upgrade -y
                sudo apt full-upgrade
                sudo apt autoremove

                read -rp "1) Defaults has been set. Reboot may be required. Press enter to continue..."
                ;;
            2)
                echo "2) Installing Firmware Updates"

                echo "TODO..."

                # Install Software
                # sudo apt install -y fwupd
                # sudo apt install -y linux-headers-amd64 firmware-linux

                # Install Firmware
                # sudo fwupdmgr get-devices
                # sudo fwupdmgr refresh --force
                # sudo fwupdmgr get-updates
                # sudo fwupdmgr update

                read -rp "2) Firmware updates has been installed. Reboot may be required. Press enter to continue..."
                ;;
            3)
                echo "5) Installing Nvidia Drivers (https://wiki.debian.org/NvidiaGraphicsDrivers)"

                echo "TODO..."

                # Prerequisites
                # sudo apt install -y linux-headers-amd64

                # Install
                # sudo apt install -y nvidia-driver firmware-misc-nonfree

                read -rp "3) Nividia Drivers has been installed. Reboot may be required. Press enter to continue..."
                ;;
            4)
                echo "4) Installing Software"

                # General
                sudo apt install -y apt-listbugs apt-listchanges software-properties-common
                sudo apt install -y build-essential binutils coreutils openssl libssl-dev
                sudo apt install -y tar p7zip-full zip unzip rsync rar unrar atool
                sudo apt install -y silversearcher-ag aspell aspell-en aspell-es autojump autoconf automake
                sudo apt install -y bat curl dnsutils dos2unix doxygen fd-find font-manager
                sudo apt install -y btop htop nvtop isync libpcap-dev make mercurial msmtp neofetch
                sudo apt install -y vim neovim pandoc pass poppler-utils poppler-data ripgrep
                sudo apt install -y scdaemon subversion telnet tldr tree w3m wget
                sudo apt install -y wordnet imagemagick
                sudo apt install -y python3 python3-pip pandoc poppler-utils poppler-data libtool
                sudo apt install -y shfmt editorconfig glslang-tools glslang-dev shellcheck parallel
                sudo apt install -y tidy sqlite3 pkg-config bison flex
                sudo apt install -y cmake ninja-build ccache meson
                sudo apt install -y valgrind minicom mc strace
                sudo apt install -y ffmpegthumbnailer mediainfo
                sudo apt install -y feh mpv qrencode findutils locate
                sudo apt install -y ncurses-term

                # Install Firefox Directly from Mozilla

                # Node
                # sudo apt install -y ca-certificates curl gnupg
                # sudo mkdir -p /etc/apt/keyrings
                # curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key |
                #     sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

                # NODE_MAJOR=21
                # NODE_URL="https://deb.nodesource.com/node_$NODE_MAJOR.x"
                # echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] $NODE_URL nodistro main" |
                #     sudo tee /etc/apt/sources.list.d/nodesource.list
                # sudo apt update && sudo apt install nodejs -y

                # Install default llvm (14)
                sudo apt install -y llvm clang clangd clang-tools clang-format

                # Install latest stable llvm (17)
                sudo apt update && sudo apt install lsb-release wget software-properties-common gnupg2
                sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"

                # Update llvm to use latest (See llvm-latest script)

                # Wayland Software
                if [[ "$WINDOW_SYSTEM" == "$WS_WAYLAND" ]]; then
                    sudo apt install -y wl-clipboard wayland-utils
                fi

                # X11 Software
                if [[ "$WINDOW_SYSTEM" == "$WS_X11" ]]; then
                    sudo apt install -y xsel xclip xinput xdotool x11-utils
                fi

                # Gnome Software
                if [[ "$WINDOW_MANAGER" == "$WM_GNOME" ]]; then
                    sudo apt -y install -y dconf-editor gnome-tweaks
                fi

                # Plasma Software
                # if [[ "$WINDOW_MANAGER" == "$WM_KDE" ]]; then
                    # sudo apt install -y yakuake
                    # sudo apt install -y latte-dock
                    # sudo apt install -y kazam
                # fi

                # I3 Software
                if [[ "$WINDOW_MANAGER" == "$WM_I3" ]]; then
                    # Xorg/I3 software
                    sudo apt install -y xorg i3 i3status i3lock dunst rofi suckless-tools lightdm

                    # Install and enable network-manager
                    sudo apt install -y network-manager
                    sudo systemctl enable NetworkManager.service && sudo systemctl start NetworkManager.service
                fi

                # Git stuff
                sudo apt install -y git
                # sudo apt install -y difftastic  # better diffs
                # sudo apt install -y git-delta   # better diffs
                # sudo apt install -y lazygit     # terminal git

                # tmux: A terminal multiplexer
                sudo apt install -y tmux

                # Alacritty - A fast, cross-platform, OpenGL terminal emulator
                sudo apt install -y alacritty

                # foot - the fast, lightweight and minimalistic Wayland terminal emulator.
                [[ "$WINDOW_SYSTEM" == "$WS_WAYLAND" ]] && sudo apt install -y foot

                # FZF
                sudo apt install -y fzf
                # dpkg -L fzf | grep bindings # Source both completion and keybindings from output of

                # gpg
                sudo apt install -y gpg gnupg2 gnupg-pkcs11-scd pcsc-tools opensc vsmartcard-vpcd
                sudo systemctl enable pcscd.service && sudo systemctl start pcscd.service

                # yubikey
                sudo apt install -y yubikey-manager

                # starship (https://starship.rs/)
                curl -sS https://starship.rs/install.sh | sh

                # ncdu (text-based disk usage viewer)
                sudo apt install -y ncdu

                # borg
                sudo apt install -y borgbackup

                # profile sync daemon
                sudo apt install -y profile-sync-daemon
                if [ -f /usr/share/psd/contrib/brave ]; then
                    sudo cp /usr/share/psd/contrib/brave /usr/share/psd/browsers
                elif [ -f "$HOME"/Workspace/Public/dotfiles/Common/psd/brave ]; then
                    sudo cp "$HOME"/Workspace/Public/dotfiles/Common/psd/brave /usr/share/psd/browsers
                fi
                systemctl --user enable psd.service && systemctl --user start psd.service

                # Neovim
                sudo apt install -y neovim

                # latex base
                sudo apt install -y texlive-base texinfo

                # non apt software
                sudo pip3 install cmake-language-server --break-system-packages
                sudo pip3 install pyright --break-system-packages
                sudo npm install --global npm@latest
                sudo npm install --global prettier
                sudo npm install --global js-beautify
                sudo npm install --global typescript-language-server typescript
                sudo npm install --global dockerfile-language-server-nodejs
                sudo npm install --global bash-language-server

                read -rp "4) Software has been installed. Press enter to continue..."
                ;;
            5)
                echo "5) Installing Extras"

                #
                # Latex Full
                #

                # sudo apt install -y texlive-full

                #
                # Steam extras
                #

                # sudo apt install -y steam-devices

                #
                # Fonts
                #

                install_berkeley_mono_font

                #
                # Remove pre-installed Gnome games
                #

                if [[ "$WINDOW_MANAGER" == "$WM_GNOME" ]]; then
                    sudo apt purge iagno lightsoff four-in-a-row gnome-robots pegsolitaire gnome-2048 \
                         hitori gnome-klotski gnome-mines gnome-mahjongg gnome-sudoku quadrapassel swell-foop \
                         gnome-tetravex gnome-taquin aisleriot gnome-chess five-or-more gnome-nibbles tali
                    sudo apt autoremove
                fi

                read -rp "5) Extras installed. Press enter to continue..."
                ;;

            6)
                echo "6) Enabling Flatpak"

                sudo apt install -y flatpak
                flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
                sudo flatpak update
                if [[ "$WINDOW_MANAGER" == "$WM_KDE" ]]; then
                    sudo apt install -y plasma-discover-backend-flatpak
                fi
                if [[ "$WINDOW_MANAGER" == "$WM_GNOME" ]]; then
                    sudo apt install -y gnome-software-plugin-flatpak
                    flatpak install --user -y flathub org.gnome.TextEditor
                    flatpak install --user -y flathub org.gnome.Firmware
                    flatpak install --user -y flathub com.mattjakeman.ExtensionManager
                fi
                flatpak install --user -y flathub com.discordapp.Discord
                flatpak install --user -y flathub com.dropbox.Client
                flatpak install --user -y flathub com.slack.Slack
                flatpak install --user -y flathub org.videolan.VLC
                flatpak install --user -y flathub org.wireshark.Wireshark
                flatpak install --user -y flathub com.github.tchx84.Flatseal
                flatpak install --user -y flathub com.transmissionbt.Transmission
                # flatpak install --user -y flathub io.github.Hexchat
                # flatpak install --user -y flathub engineer.atlas.Nyxt
                # flatpak install --user -y flathub org.mozilla.firefox
                # flatpak install --user -y flathub org.telegram.desktop
                # flatpak install --user -y flathub org.gnucash.GnuCash
                # flatpak install --user -y flathub org.gimp.GIMP
                # flatpak install --user -y flathub com.skype.Client
                # flatpak install --user -y flathub com.valvesoftware.Steam
                # flatpak install --user -y flathub im.riot.Riot
                # flatpak install --user -y flathub org.keepassxc.KeePassXC
                # flatpak install --user -y flathub com.obsproject.Studio
                # flatpak install --user -y flathub com.brave.Browser
                # flatpak install --user -y flathub org.shotcut.Shotcut
                # flatpak install --user -y flathub dev.geopjr.Tuba
                # flatpak install --user -y flathub io.github.mimbrero.WhatsAppDesktop
                # flatpak install --user -y flathub org.signal.Signal
                # flatpak install --user -y flathub com.microsoft.Edge
                # flatpak install --user -y flathub com.visualstudio.code
                # flatpak install --user -y flathub com.github.GradienceTeam.Gradience

                read -rp "6) Flatpak has now been enabled. Press enter to continue..."
                ;;
            7)
                echo "7) Setting up secrets and repos"

                read -rp "Enter keys backup directory: " KEYS_DIR
                KEYS_DIR=${KEYS_DIR%/}
                [ ! -d "$KEYS_DIR" ] && notify-send "$KEYS_DIR is not a directory" --expire-time=30000 && continue
                [ ! -f "$(pwd)/../scripts/+crypt" ] &&
                    notify-send "$(pwd)/../scripts/+crypt script does not exists" --expire-time=30000 && continue
                [ ! -f "$KEYS_DIR/ssh.tar.gz.gpg" ] &&
                    notify-send "$KEYS_DIR/ssh.tar.gz.gpg does not exists" --expire-time=30000 && continue
                [ ! -f "$KEYS_DIR/gpg.tar.gz.gpg" ] &&
                    notify-send "$KEYS_DIR/gpg.tar.gz.gpg does not exists" --expire-time=30000 && continue

                echo ">> Setting up ssh keys from $KEYS_DIR/ssh.tar.gz.gpg"
                "$(pwd)/../scripts/+crypt" -d "$KEYS_DIR/ssh.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/ssh ] &&
                    notify-send "Decryption failed, $KEYS_DIR/ssh does not exists" --expire-time=30000 && continue
                mkdir -p ~/.ssh && rm -rf ~/.ssh/*
                cp "$KEYS_DIR"/ssh/id_* ~/.ssh
                cp "$KEYS_DIR"/ssh/config ~/.ssh
                chmod 700 ~/.ssh
                chmod 644 ~/.ssh/config
                chmod 600 ~/.ssh/id_*
                chmod 644 ~/.ssh/id_*.pub
                rm -rf "$KEYS_DIR"/ssh

                echo ">> Setting up gpg keys from $KEYS_DIR/gpg.tar.gz.gpg"
                "$(pwd)/../scripts/+crypt" -d "$KEYS_DIR/gpg.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/gpg ] &&
                    notify-send "Decryption failed, $KEYS_DIR/gpg does not exists" --expire-time=30000 && continue
                mkdir -p ~/.gnupg && rm -rf ~/.gnupg/*
                cp "$KEYS_DIR"/gpg/config/*.conf ~/.gnupg
                gpg --import "$KEYS_DIR"/gpg/new_keys/0xB3F739419D91C7F3-2022-09-28.pub.asc
                rm -rf "$KEYS_DIR"/gpg

                echo "Editing gpg key 0xB3F..., you should 'trust' ultimately (Option 5) and 'quit'"
                gpg --edit-key 0xB3F739419D91C7F3

                # Remove keys
                rm -rf "$KEYS_DIR"

                # With the new keys we can go ahead and download some repos
                [ ! -d "$HOME/.password-store" ] &&
                    git clone git@github.com:jvillasante/pass.git "$HOME"/.password-store
                [ ! -d "$HOME"/Workspace/Public/dotfiles ] &&
                    git clone git@github.com:jvillasante/dotfiles.git "$HOME"/Workspace/Public/dotfiles
                [ ! -d "$HOME"/Workspace/Public/resume ] &&
                    git clone git@github.com:jvillasante/resume.git "$HOME"/Workspace/Public/resume

                read -rp "7) Secrets and repos are set. Press enter to continue..."
                ;;
            8)
                echo "8) Installing Emacs"

                # Is it already installed?
                hash emacs 2> /dev/null &&
                    notify-send "12) Emacs is already installed" --expire-time=30000 && continue

                # libgccjit-12 should match the current gcc in the system (gcc --version)
                read -rp "Is gcc version 12.*? (Y/N): " confirm &&
                    [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1

                # Install dependencies
                sudo apt build-dep emacs
                sudo apt install -y build-essential autoconf automake libtool texinfo libgtk-3-dev libxpm-dev \
                     libjpeg-dev libgif-dev libtiff5-dev gnutls-bin libgnutls30 libgnutlsxx30 libncurses-dev \
                     libxml2-dev libgpm-dev libdbus-1-dev libgtk2.0-dev libpng-dev libotf-dev libm17n-dev \
                     librsvg2-dev libmagickcore-dev libmagickwand-dev libglib2.0-dev libgirepository1.0-dev
                sudo apt install -y libgccjit0 libgccjit-12-dev # make sure is the same version as `gcc --version`
                sudo apt install -y libtree-sitter0 libtree-sitter-dev
                sudo apt install -y libjansson4 libjansson-dev
                sudo apt install -y libvterm0 libvterm-dev
                sudo apt install -y libwebp-dev webp
                sudo apt install -y libxft-dev libxft2
                sudo apt install -y libenchant-2-dev pkgconf # necessary for jinx
                sudo apt install -y libtool-bin # vterm

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/emacs ]; then
                    git clone git://git.sv.gnu.org/emacs.git "$HOME"/Workspace/Software/emacs
                    pushd "$HOME"/Workspace/Software/emacs || {
                        notify-send "Can't cd into $HOME/Workspace/Software/emacs" --expire-time=30000
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/emacs || {
                        notify-send "Can't cd into $HOME/Workspace/Software/emacs" --expire-time=30000
                        continue
                    }

                    sudo make uninstall
                    make clean && make distclean
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Build (emacs-29)
                git checkout emacs-29
                ./autogen.sh

                # Install
                EMACS_WINDOW_SYSTEM_OPTION=--with-x
                [[ "$WINDOW_SYSTEM" == "$WS_WAYLAND" ]] && EMACS_WINDOW_SYSTEM_OPTION=--with-pgtk
                ./configure \
                    $EMACS_WINDOW_SYSTEM_OPTION \
                    --without-compress-install \
                    --with-native-compilation=aot \
                    --with-tree-sitter \
                    --with-json \
                    --with-mailutils \
                    CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer" prefix=/usr/local
                make -j"$(nproc --ignore=2)"
                sudo make install

                popd || notify-send "Can't cd to previous directory" --expire-time=30000 && continue
                read -rp "8) Emacs has been installed. Press enter to continue..."
                ;;
            9)
                echo "9) Installing Keyd"
                notify-send "Using xremap at the moment" --expire-time=30000
                continue

                # Is it already installed?
                hash keyd 2> /dev/null && notify-send "Keyd is already installed" --expire-time=30000 && continue

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/keyd ]; then
                    git clone git@github.com:rvaiya/keyd.git "$HOME"/Workspace/Software/keyd
                    pushd "$HOME"/Workspace/Software/keyd || {
                        notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=30000
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/keyd || {
                        notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=30000
                        continue
                    }

                    sudo make uninstall
                    make clean && make distclean
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Install
                make -j"$(nproc --ignore=2)"
                sudo make install

                # Copy Configuration
                sudo cp "$HOME"/Workspace/Public/dotfiles/Common/keyd/default.conf /etc/keyd/default.conf

                # Add yourself to the keyd group
                sudo usermod -aG keyd -a "$USER"

                # Enable the daemon
                sudo systemctl daemon-reload
                sudo systemctl enable keyd && sudo systemctl start keyd
                sudo keyd reload

                popd || notify-send "Can't cd to previous directory" --expire-time=30000
                read -rp "9) Keyd daemon has been installed. Press enter to continue..."
                ;;
            10)
                echo "10) Installing Xkeysnail"
                notify-send "Using xremap at the moment" --expire-time=30000
                continue

                # Only works on X11
                [[ "$WINDOW_SYSTEM" != "$WS_X11" ]] &&
                    notify-send "Xkeysnail only supports X11" --expire-time=30000 && continue

                # Is it already installed?
                hash xkeysnail 2> /dev/null &&
                    notify-send "Xkeysnail is already installed" --expire-time=30000 && continue

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/xkeysnail ]; then
                    git clone --depth 1 git@github.com:mooz/xkeysnail.git "$HOME"/Workspace/Software/xkeysnail
                    pushd "$HOME"/Workspace/Software/xkeysnail || {
                        notify-send "Can't cd into $HOME/Workspace/Software/xkeysnail" --expire-time=30000
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/xkeysnail || {
                        notify-send "Can't cd into $HOME/Workspace/Software/xkeysnail" --expire-time=30000
                        continue
                    }

                    sudo pip3 uninstall . --break-system-packages
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Install
                sudo pip3 install --upgrade . --break-system-packages

                ## Run without sudo
                # First create a new group to which we allow access to the input stuff, and add this group to your user:
                sudo groupadd -f uinput
                sudo gpasswd -a "$USER" uinput

                # Second Create new udev rule granting access:
                sudo cp -f "$HOME"/Workspace/Public/dotfiles/Common/xkeysnail/udev/70-xkeysnail.rules \
                     /etc/udev/rules.d/70-xkeysnail.rules

                # Enable the daemon
                mkdir -p ~/.config/systemd/user/
                [ -L "$HOME/.config/systemd/user/xkeysnail.service" ] &&
                    unlink "$HOME/.config/systemd/user/xkeysnail.service"
                ln -s "$HOME/Workspace/Public/dotfiles/Common/systemd/user/xkeysnail.service" \
                    "$HOME/.config/systemd/user"
                systemctl --user daemon-reload
                systemctl --user enable xkeysnail.service && systemctl --user start xkeysnail.service

                popd || notify-send "Can't cd to previous directory" --expire-time=30000
                read -rp "10) Xkeysnail installed. Reboot for udev rules to take effect. Press enter to continue..."
                ;;
            11)
                echo "11) Installing Xremap"

                [[ "$WINDOW_SYSTEM" == "$WS_X11" ]] && sudo apt install -y libx11-dev

                # Is it already installed?
                hash xremap 2> /dev/null && notify-send "Xremap is already installed" --expire-time=30000 && continue

                # Install
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                [ ! -d "$HOME"/Workspace/Software/xremap ] && mkdir -p "$HOME"/Workspace/Software/xremap

                pushd "$HOME"/Workspace/Software/xremap || {
                        notify-send "Can't cd into $HOME/Workspace/Software/xremap" --expire-time=30000
                        continue
                }

                XREMAP_VERSION=v0.8.14
                XREMAP_RELEASE=xremap-linux-x86_64-kde.zip
                [[ "$WINDOW_MANAGER" == "$WM_GNOME" ]] && XREMAP_RELEASE=xremap-linux-x86_64-gnome.zip
                [[ "$WINDOW_MANAGER" == "$WM_SWAY" ]] && XREMAP_RELEASE=xremap-linux-x86_64-sway.zip

                curl -LJO https://github.com/k0kubun/xremap/releases/download/"$XREMAP_VERSION"/"$XREMAP_RELEASE"
                atool --extract --explain "$XREMAP_RELEASE"
                sudo cp -f xremap /usr/local/bin/

                popd || {
                        notify-send "Can't cd to previous directory" --expire-time=30000
                        continue
                }

                # Give current user access to input rules
                sudo gpasswd -a "$USER" input
                echo 'KERNEL=="uinput", GROUP="input", TAG+="uaccess"' | sudo tee /etc/udev/rules.d/input.rules

                # Enable the daemon
                [ ! -d "$HOME"/.config/systemd/user ] && mkdir -p "$HOME"/.config/systemd/user
                [ -L "$HOME/.config/systemd/user/xremap.service" ] && unlink "$HOME/.config/systemd/user/xremap.service"
                ln -s "$HOME/Workspace/Public/dotfiles/Common/systemd/user/xremap.service" "$HOME/.config/systemd/user"
                systemctl --user daemon-reload
                systemctl --user enable xremap.service && systemctl --user start xremap.service

                read -rp "11) Xremap installed. Reboot for udev rules to take effect. Press enter to continue..."
                ;;
            12)
                exit 0
                ;;
        esac
    done
}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

# if [ ! -f /etc/debian_version ]; then
#     echo "Error: Debian is not running on this system, exiting..."
#     exit 1
# fi

if ! hash apt 2> /dev/null; then
    echo "Error: apt not installed on this system, exiting..."
    exit 1
fi

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    install)
        [ "$nargs" -eq 1 ] || usage 1
        ubuntu_install "$@"
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
