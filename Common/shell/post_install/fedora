#!/usr/bin/env bash

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 install:"
    echo "        Install Fedora System"
    echo
    echo " e.g: $0 dnf check-update"
    exit "$1"
}

# Also in `common.sh`. Also here for 0 dependency script
is_desktop_environment() (
    local de=${1:-}
    local DEs=${XDG_CURRENT_DESKTOP:-}

    # Shortcut: If de is empty, check if empty DEs
    if [[ -z "$de" ]]; then if [[ "$DEs" ]]; then return; else return 1; fi; fi

    # Lowercase both
    de=${de,,}
                DEs=${DEs,,}

    # Check de against each DEs component
    IFS=:
           for DE in $DEs; do if [[ "$de" == "$DE" ]]; then return; fi; done

    # Not found
    return 1
)

install_berkeley_mono_font() {
    [ ! -d "$(pwd)"/fonts ] && notify-send "$(pwd)/fonts is not a directory" --expire-time=20 && return
    [ ! -f "$(pwd)"/fonts/berkeley-mono-typeface.tar.gz.gpg ] && notify-send "$(pwd)/fonts/berkeley-mono-typeface.tar.gz.gpg does not exists" --expire-time=20 && return
    [ ! -f "$(pwd)"/../scripts/+crypt ] && notify-send "$(pwd)/../scripts/+crypt script does not exists" --expire-time=20 && return
    [ ! -d "$HOME"/Workspace/Software/fonts ] && mkdir -p "$HOME"/Workspace/Software/fonts
    [ -d "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface ] && rm -rf "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface

    # copy and decrypt Berkeley Mono typeface
    cp "$(pwd)"/fonts/berkeley-mono-typeface.tar.gz.gpg "$HOME"/Workspace/Software/fonts
    [ ! -f "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface.tar.gz.gpg ] && notify-send "$HOME/Workspace/Software/fonts/berkeley-mono-typeface.tar.gz.gpg does not exists" --expire-time=20 && return
    "$(pwd)"/../scripts/+crypt -d "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface.tar.gz.gpg
    [ ! -d "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface ] && notify-send "Decryption failed, $HOME/Workspace/Software/fonts/berkeley-mono-typeface directory does not exists" --expire-time=20 && return

    # remove all fonts from ~/.local/share/fonts that start with "BerkeleyMono"
    rm -rf ~/.local/share/fonts/BerkeleyMono*

    # copy all ttf fonts to ~/.local/share/fonts
    find "$HOME"/Workspace/Software/fonts/berkeley-mono-typeface -type f -name "*.ttf" -exec cp {} "$HOME"/.local/share/fonts/ \; -print

    # Build font information caches
    fc-cache -f
}

install_iosevka_comfy_font() {
    # Prepare git repo
    [ ! -d "$HOME"/Workspace/Software/fonts ] && mkdir -p "$HOME"/Workspace/Software/fonts
    if [ ! -d "$HOME"/Workspace/Software/fonts/iosevka-comfy ]; then
        git clone --depth 1 https://git.sr.ht/~protesilaos/iosevka-comfy "$HOME"/Workspace/Software/fonts/iosevka-comfy
    else
        git --git-dir="$HOME"/Workspace/Software/fonts/iosevka-comfy/.git --work-tree="$HOME"/Workspace/Software/fonts/iosevka-comfy reset --hard HEAD
        git --git-dir="$HOME"/Workspace/Software/fonts/iosevka-comfy/.git --work-tree="$HOME"/Workspace/Software/fonts/iosevka-comfy pull
    fi

    # remove all fonts from ~/.local/share/fonts that start with "iosevka-comfy"
    rm -rf ~/.local/share/fonts/iosevka-comfy*

    # copy all otf/ttf fonts to ~/.local/share/fonts
    find "$HOME"/Workspace/Software/fonts/iosevka-comfy/ -type f \( -name "*.ttf" -o -name "*.otf" \) -exec cp {} "$HOME"/.local/share/fonts/ \; -print

    # Build font information caches
    fc-cache -f
}

install_monaspace_font() {
    # Prepare git repo
    [ ! -d "$HOME"/Workspace/Software/fonts ] && mkdir -p "$HOME"/Workspace/Software/fonts
    if [ ! -d "$HOME"/Workspace/Software/fonts/monaspace ]; then
        git clone git@github.com:githubnext/monaspace.git "$HOME"/Workspace/Software/fonts/monaspace
    else
        git --git-dir="$HOME"/Workspace/Software/fonts/monaspace/.git --work-tree="$HOME"/Workspace/Software/fonts/monaspace reset --hard HEAD
        git --git-dir="$HOME"/Workspace/Software/fonts/monaspace/.git --work-tree="$HOME"/Workspace/Software/fonts/monaspace pull
    fi

    # remove all fonts from ~/.local/share/fonts that start with "monaspace"
    rm -rf ~/.local/share/fonts/Monaspace*

    # copy all otf/ttf fonts to ~/.local/share/fonts
    find "$HOME"/Workspace/Software/fonts/monaspace/ -type f \( -name "*.ttf" -o -name "*.otf" \) -exec cp {} "$HOME"/.local/share/fonts/ \; -print

    # Build font information caches
    fc-cache -f
}

fedora_install() {
    HEIGHT=25
    WIDTH=100
    CHOICE_HEIGHT=4
    BACKTITLE="Fedora Setup Util"
    TITLE="Please Make a selection"
    MENU="Please Choose one of the following options:"

    read -rp "Enter Window System (Wayland or X11, defaults 'Wayland'): " WINDOW_SYSTEM
    [ -z "$WINDOW_SYSTEM" ] && WINDOW_SYSTEM="Wayland"
    case "$WINDOW_SYSTEM" in
        X11)
            echo "$BACKTITLE for $WINDOW_SYSTEM"
            ;;
        Wayland)
            echo "$BACKTITLE for $WINDOW_SYSTEM"
            ;;
        *)
            usage 1
            ;;
    esac

    # Check to see if Dialog is installed, if not install it
    if [ "$(rpm -q dialog 2> /dev/null | grep -c "is not installed")" -eq 1 ]; then
        sudo dnf install -y dialog
    fi

    # Check to see if libnotify is installed, if not install it
    if [ "$(rpm -q libnotify 2> /dev/null | grep -c "is not installed")" -eq 1 ]; then
        sudo dnf install -y libnotify
    fi

    OPTIONS=(
        1 "Setup Defaults - Set some defaults (hostname, folders structure, global settings, etc)"
        2 "Setup DNF - Setup DNF & Firmware update"
        3 "Setup RPM Fussion - Update Kernel & RPM Fussion (reboot needed)"
        4 "Install NVIDIA - Install NVIDIA Drivers (reboot needed)"
        5 "Install Software - Installs a bunch of my most used software"
        6 "Install Extras - Themes Fonts and Codecs"
        7 "Enable Flatpak - Enables the Flatpak repo and installs packages"
        8 "Setup Secrets and Repos - Setup ssh and gpg from backups and get git repos"
        9 "Install Emacs - Install Emacs"
        10 "Install Keyd - Install Keyd from source (using xremap, here for documentation only)"
        11 "Install Xkeysnail - Install Xkeysnail from source (using xremap, here for documentation only)"
        12 "Install Xremap - Install Xremap from source"
        13 "Quit")

    while true; do
        CHOICE=$(dialog --clear \
                        --backtitle "$BACKTITLE" \
                        --title "$TITLE" \
                        --nocancel \
                        --menu "$MENU" \
                        $HEIGHT $WIDTH $CHOICE_HEIGHT \
                        "${OPTIONS[@]}" \
            2>&1             > /dev/tty)

        clear
        case $CHOICE in
            1)
                echo "$CHOICE) Setting Defaults"

                # hostname
                read -r -p "Enter pretty hostname (defaults to 'Julio's Personal Laptop'): " HOSTNAME_PRETTY
                [ -z "$HOSTNAME_PRETTY" ] && HOSTNAME_PRETTY="Julio's Personal Laptop"
                hostnamectl set-hostname --pretty "$HOSTNAME_PRETTY"

                read -r -p "Enter static hostname (defaults to 'fedora-xps-9710'): " HOSTNAME_STATIC
                [ -z "$HOSTNAME_STATIC" ] && HOSTNAME_STATIC="fedora-xps-9710"
                hostnamectl set-hostname --static "$HOSTNAME_STATIC"

                # xdg
                export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
                export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
                export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
                export XDG_LIB_HOME="${XDG_DATA_HOME:-$HOME/.local/lib}"
                export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
                mkdir -p \
                      "${XDG_CACHE_HOME}" \
                      "${XDG_CONFIG_HOME}" \
                      "${XDG_DATA_HOME}" \
                      "${XDG_LIB_HOME}" \
                      "${XDG_STATE_HOME}"

                # Folder structure
                mkdir -p "$HOME/.local/bin"
                mkdir -p "$HOME/Workspace"
                mkdir -p "$HOME/Workspace/Books"
                mkdir -p "$HOME/Workspace/Private/Projects"
                mkdir -p "$HOME/Workspace/Public"
                mkdir -p "$HOME/Workspace/Software"
                mkdir -p "$HOME/Workspace/Stuff"
                mkdir -p "$HOME/Workspace/Work"
                mkdir -p "$HOME/Workspace/Work/Projects"
                mkdir -p "$HOME/Workspace/Work/Software"
                mkdir -p "$HOME/Workspace/Work/Stuff"

                # Gnome Gsettings - dconf-editor
                #  - View current settings - gsettings list-recursively org.gnome.desktop.interface
                #  - Reset to default setting - gsettings reset org.gnome.desktop.interface enable-animations
                if is_desktop_environment "Gnome"; then
                    # Clock Settings
                    gsettings set org.gnome.desktop.interface clock-format '12h'
                    gsettings set org.gnome.desktop.interface clock-show-date true
                    gsettings set org.gnome.desktop.interface clock-show-seconds false
                    gsettings set org.gnome.desktop.interface clock-show-weekday false

                    # No hot corners
                    gsettings set org.gnome.desktop.interface enable-hot-corners false

                    # Emacs please
                    gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'

                    # Show battery
                    gsettings set org.gnome.desktop.interface show-battery-percentage true

                    # Enable window buttons
                    gsettings set org.gnome.desktop.wm.preferences button-layout ':minimize,maximize,close'

                    # Set new windows centered
                    gsettings set org.gnome.mutter center-new-windows true

                    # Set list-view for Nautilius
                    gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'

                    # Force alt + tab to switch only on current workspace
                    gsettings set org.gnome.shell.app-switcher current-workspace-only true

                    # Set fractional scaling (only for wayland)
                    # gsettings set org.gnome.mutter experimental-features "['scale-monitor-framebuffer']"

                    # Stop Gnome Software downloading updates
                    # gsettings set org.gnome.software allow-updates false
                    # gsettings set org.gnome.software download-updates false
                    # gsettings set org.gnome.software download-updates-notify false
                fi

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            2)
                echo "$CHOICE) Setting up DNF & Firmware update"

                # Setup dnf configs
                echo 'max_parallel_downloads=10' | sudo tee -a /etc/dnf/dnf.conf
                sudo dnf upgrade -y --refresh

                sudo fwupdmgr get-devices
                sudo fwupdmgr refresh --force
                sudo fwupdmgr get-updates
                sudo fwupdmgr update

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            3)
                echo "$CHOICE) Setting up RPM Fussion"

                # update kernel
                sudo dnf install -y gcc kernel-headers kernel-devel

                # Enable RPM Fusion
                sudo dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-"$(rpm -E %fedora)".noarch.rpm \
                     https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-"$(rpm -E %fedora)".noarch.rpm
                sudo dnf upgrade -y --refresh
                sudo dnf -y groupupdate core
                sudo dnf install -y rpmfusion-free-release-tainted
                sudo dnf install -y rpmfusion-nonfree-release-tainted
                sudo dnf install -y dnf-plugins-core
                sudo dnf install -y \*-firmware

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            4)
                echo "$CHOICE) Installing NVIDIA Drivers. We need to disable secure boot on the bios for NVIDIA Drivers to be loaded."

                # Using RPM Fusion
                sudo dnf install -y akmod-nvidia
                sudo dnf install -y xorg-x11-drv-nvidia xorg-x11-drv-nvidia-libs
                sudo dnf install -y xorg-x11-drv-nvidia-cuda xorg-x11-drv-nvidia-cuda-libs
                sudo dnf install -y vdpauinfo libva-vdpau-driver libva-utils
                sudo dnf install -y vulkan vulkan-tools
                sudo dnf install -y xorg-x11-drv-nvidia-power
                systemctl enable nvidia-{suspend,resume,hibernate}

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            5)
                echo "$CHOICE) Installing Software"

                # general
                sudo dnf install -y dnf-plugins-core copr-cli
                sudo dnf groupinstall -y "Development Tools" "Development Libraries" "C Development Tools and Libraries"
                sudo dnf install -y git ripgrep fd-find util-linux-user xprop xwininfo htop btop nvtop
                sudo dnf install -y aspell aspell-en aspell-es autojump atool autoconf automake bat cmake vim
                sudo dnf install -y freetype-devel fontconfig-devel libxcb-devel libxkbcommon-devel
                sudo dnf install -y curl dnsutils dos2unix doxygen msmtp neofetch
                sudo dnf install -y graphviz htop mercurial ninja-build pass
                sudo dnf install -y nodejs npm python3 python3-pip pandoc poppler-utils poppler-data
                sudo dnf install -y subversion tldr tree w3m wget libtool texinfo
                sudo dnf install -y wordnet shfmt editorconfig glslang ShellCheck parallel
                sudo dnf install -y llvm clang clang-tools-extra libpcap libpcap-devel
                sudo dnf install -y pkg-config openssl openssl-devel flex bison tar unar unrar unzip p7zip p7zip-plugins
                sudo dnf install -y ImageMagick ImageMagick-devel sqlite
                sudo dnf install -y valgrind minicom mc strace tidy
                sudo dnf install -y ffmpegthumbnailer mediainfo
                sudo dnf install -y feh mpv eza
                sudo dnf install -y ncurses-term
                sudo dnf install -y ccache
                sudo dnf install -y meson

                # Gnome Software
                if is_desktop_environment "Gnome"; then
                    sudo dnf -y install -y gnome-tweaks dconf-editor
                fi

                # Plasma Software
                # if is_desktop_environment "KDE"; then
                    # sudo dnf install -y yakuake
                    # sudo dnf install -y latte-dock
                # fi

                # wayland stuff
                [[ $WINDOW_SYSTEM = Wayland ]] && sudo dnf install -y egl-wayland egl-wayland-devel wl-clipboard

                # X11 stuff
                if [[ $WINDOW_SYSTEM = X11 ]]; then
                    sudo dnf install -y xclip xinput xdotool x11-utils # some X11 tools

                    # Gnome already have a screen recorder
                    if ! is_desktop_environment "Gnome"; then
                        sudo dnf install -y kazam  # simple screen recorder for X11
                    fi
                fi

                # tmux: A terminal multiplexer
                sudo dnf install -y tmux

                # alacritty - A fast, cros-platform, OpenGL terminal emulator
                sudo dnf install -y alacritty

                # foot - the fast, lightweight and minimalistic Wayland terminal emulator.
                [[ $WINDOW_SYSTEM = Wayland ]] && sudo dnf install -y foot

                # Starship Prompt
                curl -sS https://starship.rs/install.sh | sh

                # gpg
                sudo dnf install -y gpg gnupg2 gnupg-pkcs11-scd pcsc-tools opensc pcsc-lite-ccid
                systemctl enable pcscd && systemctl start pcscd

                # yubikey
                sudo dnf install -y yubikey-manager

                # mail
                # sudo dnf install -y isync mu maildir-utils

                # ncdu (text-based disk usage viewer)
                sudo dnf install -y ncdu

                # Borg Backup
                sudo dnf install -y borgbackup

                # Command Line Fuzzy Finder
                # dnf install -y skim
                sudo dnf install -y fzf

                # Neovim
                sudo dnf install -y neovim

                # Firewall GUI to manage firewalld
                # sudo dnf install -y firewall-config

                # Profile sync daemon
                sudo dnf install -y profile-sync-daemon
                [ -f /usr/share/psd/contrib/brave ] && sudo cp /usr/share/psd/contrib/brave /usr/share/psd/browsers
                systemctl --user enable psd.service && systemctl --user start psd.service

                # Go
                # sudo dnf install -y go

                # non dnf software
                pip install cmake-language-server
                pip install pyright
                sudo npm install --global npm@latest
                sudo npm install --global prettier
                sudo npm install --global js-beautify
                sudo npm install --global typescript-language-server typescript
                sudo npm install --global dockerfile-language-server-nodejs
                sudo npm install --global bash-language-server

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            6)
                echo "$CHOICE) Installing Extras"

                #
                # Multimedia
                #

                # Old...
                # sudo dnf groupupdate -y sound-and-video
                # sudo dnf install -y libdvdcss
                # sudo dnf install -y gstreamer1-plugins-{bad-\*,good-\*,ugly-\*,base} \
                    #     gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel ffmpeg gstreamer-ffmpeg
                # sudo dnf install -y lame\* --exclude=lame-devel
                # sudo dnf config-manager --set-enabled fedora-cisco-openh264
                # sudo dnf install -y gstreamer1-plugin-openh264 mozilla-openh264
                # sudo dnf group upgrade -y --with-optional Multimedia

                # Install additional codecs
                sudo dnf groupupdate multimedia --setop="install_weak_deps=False" --exclude=PackageKit-gstreamer-plugin --allowerasing
                sudo dnf groupupdate sound-and-video

                # Install Hardware Accelerated Codec
                if test "$(cat /proc/cpuinfo | grep vendor | uniq | grep -iFc "intel")"; then
                    echo "$CHOICE) Installing Hardware Accelerated Codecs for Intel Architecture"
                    sudo dnf install -y intel-media-driver
                elif test "$(cat /proc/cpuinfo | grep vendor | uniq | grep -iFc "amd")"; then
                    echo "$CHOICE) Installing Hardware Accelerated Codecs for AMD Architecture"
                    sudo dnf swap mesa-va-drivers mesa-va-drivers-freeworld
                    sudo dnf swap mesa-vdpau-drivers mesa-vdpau-drivers-freeworld
                else
                    echo "$CHOICE) Unknown Architecture. Not Installing Hardware Accelerated Codecs"
                fi

                # Hardware codecs with NVIDIA
                sudo dnf install -y nvidia-vaapi-driver --allowerasing

                # Play a DVD
                sudo dnf install -y rpmfusion-free-release-tainted && sudo dnf install -y libdvdcss

                # Various firmwares
                sudo dnf install -y rpmfusion-nonfree-release-tainted
                sudo dnf --repo=rpmfusion-nonfree-tainted install -y "*-firmware"

                #
                # Brave Browser
                #
                # sudo dnf install -y dnf-plugins-core
                # sudo dnf config-manager --add-repo https://brave-browser-rpm-release.s3.brave.com/brave-browser.repo
                # sudo rpm --import https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
                # sudo dnf install -y brave-browser

                #
                # Docker
                #

                # Install and Enable Docker (not working on fedora-38)
                sudo dnf install -y dnf-plugins-core
                sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
                sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                sudo systemctl enable docker && sudo systemctl start docker

                # add user
                sudo usermod -G docker -a "$USER"
                sudo systemctl restart docker

                #
                # Latex
                #

                sudo dnf install -y texlive-scheme-full

                #
                # Steam extras
                #

                sudo dnf install -y steam-devices

                #
                # Fonts
                #

                sudo dnf -y copr enable peterwu/iosevka
                sudo dnf update -y
                sudo dnf install -y libreoffice-opensymbol-fonts
                sudo dnf install -y adobe-source-code-pro-fonts
                sudo dnf install -y jetbrains-mono-fonts-all
                sudo dnf install -y ibm-plex-mono-fonts ibm-plex-sans-fonts ibm-plex-serif-fonts
                sudo dnf install -y iosevka-fonts iosevka-fixed-fonts iosevka-term-fonts iosevka-slab-fonts iosevka-aile-fonts
                install_berkeley_mono_font
                install_iosevka_comfy_font
                install_monaspace_font

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            7)
                echo "$CHOICE) Enabling Flatpak"

                sudo dnf install -y flatpak
                sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
                sudo flatpak update
                if is_desktop_environment "Gnome"; then
                    sudo flatpak install -y flathub org.gnome.TextEditor
                    sudo flatpak install -y flathub org.gnome.Firmware
                    sudo flatpak install -y flathub com.mattjakeman.ExtensionManager
                fi
                sudo flatpak install -y flathub com.discordapp.Discord
                sudo flatpak install -y flathub com.dropbox.Client
                sudo flatpak install -y flathub com.skype.Client
                sudo flatpak install -y flathub com.slack.Slack
                sudo flatpak install -y flathub org.videolan.VLC
                sudo flatpak install -y flathub com.transmissionbt.Transmission
                sudo flatpak install -y flathub org.gimp.GIMP
                sudo flatpak install -y flathub org.wireshark.Wireshark
                sudo flatpak install -y flathub com.github.tchx84.Flatseal
                sudo flatpak install -y flathub com.valvesoftware.Steam
                sudo flatpak install -y flathub org.telegram.desktop
                # sudo flatpak install -y flathub im.riot.Riot
                # sudo flatpak install -y flathub org.mozilla.firefox
                # sudo flatpak install -y flathub com.obsproject.Studio
                # sudo flatpak install -y flathub com.brave.Browser
                # sudo flatpak install -y flathub org.shotcut.Shotcut
                # sudo flatpak install -y flathub dev.geopjr.Tuba
                # sudo flatpak install -y flathub io.github.mimbrero.WhatsAppDesktop
                # sudo flatpak install -y flathub org.signal.Signal
                # sudo flatpak install -y flathub com.microsoft.Edge
                # sudo flatpak install -y flathub com.visualstudio.code
                # sudo flatpak install -y flathub com.github.GradienceTeam.Gradience

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            8)
                echo "$CHOICE) Setting up secrets and repos"
                read -r -p "Enter keys backup directory: " KEYS_DIR
                KEYS_DIR=${KEYS_DIR%/}
                [ ! -d "$KEYS_DIR" ] && notify-send "$KEYS_DIR is not a directory" --expire-time=20 && continue
                [ ! -f "$(pwd)/../scripts/+crypt" ] && notify-send "$(pwd)/../scripts/+crypt script does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/ssh.tar.gz.gpg" ] && notify-send "$KEYS_DIR/ssh.tar.gz.gpg does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/gpg.tar.gz.gpg" ] && notify-send "$KEYS_DIR/gpg.tar.gz.gpg does not exists" --expire-time=20 && continue

                echo ">> Setting up ssh keys from $KEYS_DIR/ssh.tar.gz.gpg"
                "$(pwd)/../scripts/+crypt" -d "$KEYS_DIR/ssh.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/ssh ] && notify-send "Decryption failed, $KEYS_DIR/ssh does not exists" --expire-time=20 && continue
                mkdir -p ~/.ssh && rm -rf ~/.ssh/*
                cp "$KEYS_DIR"/ssh/id_* ~/.ssh
                cp "$KEYS_DIR"/ssh/config ~/.ssh
                chmod 700 ~/.ssh
                chmod 644 ~/.ssh/config
                chmod 600 ~/.ssh/id_*
                chmod 644 ~/.ssh/id_*.pub
                rm -rf "$KEYS_DIR"/ssh

                echo ">> Setting up gpg keys from $KEYS_DIR/gpg.tar.gz.gpg"
                "$(pwd)/../scripts/+crypt" -d "$KEYS_DIR/gpg.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/gpg ] && notify-send "Decryption failed, $KEYS_DIR/gpg does not exists" --expire-time=20 && continue
                mkdir -p ~/.gnupg && rm -rf ~/.gnupg/*
                cp "$KEYS_DIR"/gpg/config/*.conf ~/.gnupg
                gpg --import "$KEYS_DIR"/gpg/new_keys/0xB3F739419D91C7F3-2022-09-28.pub.asc
                rm -rf "$KEYS_DIR"/gpg

                echo "Editing gpg key 0xB3F..., you should 'trust' ultimately (Option 5) and 'quit'"
                gpg --edit-key 0xB3F739419D91C7F3

                # Remove keys
                rm -rf "$KEYS_DIR"

                # With the new keys we can go ahead and download some repos
                [ ! -d "$HOME/.password-store" ] && git clone git@github.com:jvillasante/pass.git "$HOME"/.password-store
                [ ! -d "$HOME"/Workspace/Public/dotfiles ] && git clone git@github.com:jvillasante/dotfiles.git "$HOME"/Workspace/Public/dotfiles
                [ ! -d "$HOME"/Workspace/Public/resume ] && git clone git@github.com:jvillasante/resume.git "$HOME"/Workspace/Public/resume

                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            9)
                echo "$CHOICE) Installing Emacs"

                # Is it already installed?
                hash emacs 2> /dev/null && notify-send "Emacs is already installed" --expire-time=20 && continue

                # Install dependencies
                sudo dnf builddep emacs
                sudo dnf install -y libgccjit libgccjit-devel gtk3 gtk3-devel gtk4 gtk4-devel libtree-sitter libtree-sitter-devel \
                     jansson-devel libvterm-devel gnutls-devel
                sudo dnf install -y enchant2-devel pkgconf # necessary for jinx

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/emacs ]; then
                    git clone git://git.sv.gnu.org/emacs.git "$HOME"/Workspace/Software/emacs
                    pushd "$HOME"/Workspace/Software/emacs || {
                        notify-send "Can't cd into $HOME/Workspace/Software/emacs" --expire-time=20
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/emacs || {
                        notify-send "Can't cd into $HOME/Workspace/Software/emacs" --expire-time=20
                        continue
                    }

                    sudo make uninstall
                    make clean && make distclean
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Build (emacs-29)
                git checkout emacs-29
                ./autogen.sh

                # Install
                EMACS_WINDOW_SYSTEM_OPTION=--with-x
                [[ $WINDOW_SYSTEM = Wayland ]] && EMACS_WINDOW_SYSTEM_OPTION=--with-pgtk
                ./configure \
                    $EMACS_WINDOW_SYSTEM_OPTION \
                    --without-compress-install \
                    --with-native-compilation=aot \
                    --with-tree-sitter \
                    --with-json \
                    --with-mailutils \
                    CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer" prefix=/usr/local
                make -j"$(nproc --ignore=2)"
                sudo make install

                popd || notify-send "Can't cd to previous directory" --expire-time=20
                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            10)
                echo "$CHOICE) Installing Keyd"

                # Is it already installed?
                hash keyd 2> /dev/null && notify-send "Keyd is already installed" --expire-time=20 && continue

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/keyd ]; then
                    git clone git@github.com:rvaiya/keyd.git "$HOME"/Workspace/Software/keyd
                    pushd "$HOME"/Workspace/Software/keyd || {
                        notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=20
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/keyd || {
                        notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=20
                        continue
                    }

                    sudo make uninstall
                    make clean && make distclean
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Install
                make -j"$(nproc --ignore=2)"
                sudo make install

                # Copy Configuration
                sudo cp "$HOME"/Workspace/Public/dotfiles/Common/keyd/default.conf /etc/keyd/default.conf

                # Add yourself to the keyd group
                sudo usermod -aG keyd -a "$USER"

                # Enable the daemon
                systemctl --user daemon-reload
                sudo systemctl enable keyd && sudo systemctl start keyd
                sudo keyd reload

                popd || notify-send "Can't cd to previous directory" --expire-time=20
                read -rp "$CHOICE) Done. Press enter to continue..."
                ;;
            11)
                echo "11) Installing Xkeysnail"

                # Only works on X11
                [[ "$WINDOW_SYSTEM" != X11 ]] && notify-send "Xkeysnail only supports X11" --expire-time=20 && continue

                # Is it already installed?
                hash xkeysnail 2> /dev/null && notify-send "Xkeysnail is already installed" --expire-time=20 && continue

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/xkeysnail ]; then
                    git clone --depth 1 git@github.com:mooz/xkeysnail.git "$HOME"/Workspace/Software/xkeysnail
                    pushd "$HOME"/Workspace/Software/xkeysnail || {
                        notify-send "Can't cd into $HOME/Workspace/Software/xkeysnail" --expire-time=20
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/xkeysnail || {
                        notify-send "Can't cd into $HOME/Workspace/Software/xkeysnail" --expire-time=20
                        continue
                    }

                    sudo pip3 uninstall . --break-system-packages
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Install
                sudo pip3 install --upgrade . --break-system-packages

                ## Run without sudo
                # First create a new group to which we allow access to the input stuff, and add this group to your user:
                sudo groupadd -f uinput
                sudo gpasswd -a "$USER" uinput

                # Second Create new udev rule granting access:
                sudo cp -f "$HOME"/Workspace/Public/dotfiles/Common/xkeysnail/udev/70-xkeysnail.rules /etc/udev/rules.d/70-xkeysnail.rules

                # Enable the daemon
                [ -L "$HOME/.config/systemd/user/xkeysnail.service" ] && unlink "$HOME/.config/systemd/user/xkeysnail.service"
                ln -s "$HOME/Workspace/Public/dotfiles/Common/systemd/user/xkeysnail.service" "$HOME/.config/systemd/user"
                systemctl --user daemon-reload
                sudo systemctl enable xkeysnail.service && sudo systemctl start xkeysnail.service

                popd || notify-send "Can't cd to previous directory" --expire-time=20
                read -rp "11) Xkeysnail has been installed. Reboot is necessary for udev rules to take effect. Press enter to continue..."
                ;;
            12)
                echo "12) Installing Xremap"

                [[ "$WINDOW_SYSTEM" == X11 ]] && sudo dnf install -y libx11-devel

                # Is it already installed?
                hash xremap 2> /dev/null && notify-send "Xremap is already installed" --expire-time=20 && continue

                # Install
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                [ ! -d "$HOME"/Workspace/Software/xremap ] && mkdir -p "$HOME"/Workspace/Software/xremap

                pushd "$HOME"/Workspace/Software/xremap || {
                        notify-send "Can't cd into $HOME/Workspace/Software/xremap" --expire-time=20
                        continue
                }

                XREMAP_VERSION=v0.8.12
                XREMAP_RELEASE=xremap-linux-x86_64-kde.zip
                if is_desktop_environment "Gnome"; then
                    XREMAP_RELEASE=xremap-linux-x86_64-gnome.zip
                fi

                curl -LJO https://github.com/k0kubun/xremap/releases/download/"$XREMAP_VERSION"/"$XREMAP_RELEASE"
                atool --extract --explain "$XREMAP_RELEASE"
                sudo cp -f xremap /usr/local/bin/

                popd || {
                        notify-send "Can't cd to previous directory" --expire-time=20
                        continue
                }

                # First create a new group to which we allow access to the input stuff, and add this group to your user:
                sudo groupadd -f uinput
                sudo gpasswd -a "$USER" uinput

                # Second Create new udev rule granting access:
                sudo cp -f "$HOME"/Workspace/Public/dotfiles/Common/xremap/udev/70-xremap.rules /etc/udev/rules.d/70-xremap.rules

                # Enable the daemon
                [ ! -d "$HOME"/.config/systemd/user ] && mkdir -p "$HOME"/.config/systemd/user
                [ -L "$HOME/.config/systemd/user/xremap.service" ] && unlink "$HOME/.config/systemd/user/xremap.service"
                ln -s "$HOME/Workspace/Public/dotfiles/Common/systemd/user/xremap.service" "$HOME/.config/systemd/user"
                systemctl --user daemon-reload
                systemctl --user enable xremap.service && systemctl --user start xremap.service

                read -rp "12) Xremap has been installed. Reboot is necessary for udev rules to take effect. Press enter to continue..."
                ;;
            13)
                exit 0
                ;;
        esac
    done
}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

if [ ! -f /etc/fedora-release ]; then
    echo "Error: Fedora is not running on this system, exiting..."
    exit 1
fi

if ! hash dnf 2> /dev/null; then
    echo "Error: dnf not installed on this system, exiting..."
    exit 1
fi

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    install)
        [ "$nargs" -eq 1 ] || usage 1
        fedora_install "$@"
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
