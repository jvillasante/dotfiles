#!/usr/bin/env bash

#
# fzf
#
if type fzf >/dev/null 2>/dev/null; then
    [ -f "$HOME"/.fzf.zsh ] && source "$HOME"/.fzf.zsh
    [ -f /usr/share/fzf/shell/key-bindings.bash ] && source /usr/share/fzf/shell/key-bindings.bash
    [ -f /usr/share/bash-completion/completions/fzf-key-bindings ] && source /usr/share/bash-completion/completions/fzf-key-bindings
    [ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash

    # Use ~~ as the trigger sequence instead of the default **
    # export FZF_COMPLETION_TRIGGER='~~'

    # Options to fzf command
    # export FZF_TMUX_OPTS="-p 80%,60%"
    export FZF_DEFAULT_OPTS='--height 40% --ansi --extended --layout=reverse --no-border --info=inline --color=gutter:-1'
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

    # Use fd (https://github.com/sharkdp/fd) instead of the default find
    # command for listing path candidates.
    # - The first argument to the function ($1) is the base path to start traversal
    # - See the source code (completion.{bash,zsh}) for the details.
    _fzf_compgen_path() {
        fd --hidden --follow --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        fd --type d --hidden --follow --exclude ".git" . "$1"
    }

    #
    # General
    #

    # switch to a project
    fproj() {
        local selected tmux_running selected_name
        selected=$(find "$HOME"/Workspace/Private/Projects/*/ "$HOME"/Workspace/Public \
                        "$HOME"/Workspace/Work/Projects -mindepth 1 -maxdepth 1 -type d | fzf)
        [[ -z $selected ]] && return

        selected_name=$(basename "$selected" | tr . _)
        [[ -z $selected ]] && return

        if [[ dmxs = "$selected_name" ]]; then
            "$HOME/Workspace/Public/dotfiles/Common/shell/tmux/dmxs.session" "$selected" "$selected_name"
            return
        fi

        if [[ sm2-dhcpee = "$selected_name" ]]; then
            "$HOME/Workspace/Public/dotfiles/Common/shell/tmux/dhcpee.session" "$selected" "$selected_name"
            return
        fi

        tmux_running=$(pgrep tmux)
        if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
            tmux new-session -s "$selected_name" -c "$selected"
        else
            if ! tmux has-session -t="$selected_name" 2>/dev/null; then
                tmux new-session -ds "$selected_name" -c "$selected"
            fi
            tmux switch-client -t "$selected_name"
        fi
    }

    # change to an arbitrary subdirectory
    fcd() {
        cd "$(find . -type d | fzf)" || return
    }

    # fuzzy match current directory contents
    ffuzz() {
        find . -wholename \*"$1"\* -not -path './.*/*' | fzf
    }

    # run a command from the history
    fhist() {
        "$(history | cut -c8- | sort -u | fzf)"
    }

    #
    # Processes
    #

    # show process id - interactive grep
    fpgrep() {
        ps aux | eval fzf | awk '{ print $2 }'
    }

    # kill processes - list only the ones you can kill.
    fpkill() {
        local pid
        if [ "$UID" != "0" ]; then
            pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
        else
            pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
        fi

        if [ "x$pid" != "x" ]; then
            echo "$pid" | xargs kill -"${1:-9}"
        fi
    }

    #
    # Git
    #

    # fbr - checkout git branch (including remote branches)
    fbr() {
        local branches branch
        branches=$(git branch --all | grep -v HEAD) &&
            branch=$(echo "$branches" | fzf -d $((2 + $(wc -l <<<"$branches"))) +m) &&
            git checkout "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
    }

    # fco - checkout git branch/tag
    fco() {
        local tags branches target
        branches=$(
            git --no-pager branch --all \
                --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" |
                sed '/^$/d'
                ) || return
        tags=$(git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
        target=$(
            (
                echo "$branches"
                echo "$tags"
            ) |
                fzf --no-hscroll --no-multi -n 2 \
                    --ansi
              ) || return
        git checkout "$(awk '{print $2}' <<<"$target")"
    }

    # fcoc - checkout git commit
    fcoc() {
        local commits commit
        commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
            commit=$(echo "$commits" | fzf --tac +s +m -e) &&
            git checkout "$(echo "$commit" | sed "s/ .*//")"
    }

    # fshow - git commit browser
    fshow() {
        git log --graph --color=always \
            --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
            fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
                --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
    }

    #
    # Pass
    #
    if type pass >/dev/null 2>/dev/null; then
        -fpass() {
            local passfile actions action
            pushd "${PASSWORD_STORE_DIR:-${HOME}/.password-store}" || return
            passfile=$(tree -Ffi | grep '.gpg' | sed 's/.gpg$//g' | sed 's/^..//' | fzf)
            if [ -z "$passfile" ]; then
                popd && return || return;
            fi
            popd || return
            actions="Copy Password\nCopy Password and Quit\nView File\nView File and Quit\nEdit File\nEdit File and Quit\nQuit"
            while true; do
                action=$(echo -e "$actions" | fzf --height 12 --border --header "Pass file $passfile")
                case ${action} in
                    "Copy Password")
                        pass --clip "${passfile}"
                        ;;
                    "Copy Password and Quit")
                        pass --clip "${passfile}"
                        break
                        ;;
                    "View File")
                        pass "${passfile}"
                        ;;
                    "View File and Quit")
                        pass "${passfile}"
                        break
                        ;;
                    "Edit File")
                        pass edit "${passfile}"
                        ;;
                    "Edit File and Quit")
                        pass edit "${passfile}"
                        break
                        ;;
                    "Quit") break ;;
                    *) break ;;
                esac
            done
        }

        fpass() {
            store="$HOME/.password-store/"
            swapfile="/swap/swapfile" # Set path to any swapfile not listed in /etc/fstab

            # Open pass tomb, if any
            if [[ -e "$HOME/.password.tomb" ]]; then
                sudo swapoff -a && sudo swapoff "${swapfile}" 2> /dev/null
                pass open 2> /dev/null
            fi

            while :; do
                clear
                selection=$(fd .gpg ~/.password-store/ -d 8 \
                                | fzf --query "${tmp}" \
                                      --prompt="# " \
                                      --with-nth 5.. \
                                      --delimiter "/" \
                                      --no-multi \
                                      --header='
Ret: copy, M-s: show, M-e: edit, M-r: rename, M-d: duplicate,
M-a: add, M-g: generate and copy new password, M-t: trash
M-p: git pull, M-P: git push, C-g/Esc: clear query or exit' \
                                      --margin='1,2,1,2' \
                                      --bind="alt-s:execute(echo 'show' > /tmp/passfzfarg)+accept" \
                                      --bind="alt-e:execute(echo 'edit' > /tmp/passfzfarg)+accept" \
                                      --bind="alt-r:execute(echo 'mv' > /tmp/passfzfarg)+accept" \
                                      --bind="alt-d:execute(echo 'cp' > /tmp/passfzfarg)+accept" \
                                      --bind="alt-a:execute(echo 'add' > /tmp/passfzfarg)+print-query" \
                                      --bind="alt-g:execute(echo 'generate --clip' > /tmp/passfzfarg)+print-query" \
                                      --bind="alt-t:execute(echo 'rm' > /tmp/passfzfarg)+accept" \
                                      --bind="alt-p:abort+execute(echo 'git pull' > /tmp/passfzfarg)" \
                                      --bind="alt-P:abort+execute(echo 'git push -u --all' > /tmp/passfzfarg)" \
                                      --bind="ctrl-g:execute(echo 'quit' > /tmp/passfzfarg)+cancel" \
                                      --bind="esc:execute(echo 'quit' > /tmp/passfzfarg)+cancel")

                if [[ -f "/tmp/passfzfarg" ]]; then
                    arg=$(cat /tmp/passfzfarg)
                    rm /tmp/passfzfarg

                    # quit: can be clear or exit
                    if [[ "$arg" = "quit" ]]; then
                        # no selection means exit
                        [[ -z "$selection" ]] && break

                        # new selection means start over
                        [[ -n "$selection" ]] && arg="show --clip"
                    fi
                else
                    arg="show --clip"
                fi

                if ! [[ -v "$selection" ]]; then
                    clear
                    case "$arg" in
                        add)
                            printf "\033[0;32mNew password Directory/Name:\033[0m ${selection}"
                            if [[ -n "$selection" ]]; then
                                printf "\033[0;32m\nPress Return to confirm or type new Directory/Name:\033[0m "
                            fi
                            read -r
                            tmp="${REPLY:=$selection}"
                            pass ${arg} "${tmp}"
                            tmp="${selection:=$tmp}"
                            continue
                            ;;
                        mv | cp)
                            tmp=${selection::-4} && tmp=${tmp#"$store"}
                            printf "\033[0;32m\nNew Directory/Name to ${arg} '${tmp}' to:\033[0m "
                            read -r
                            if [[ -n "$REPLY" ]]; then
                                pass ${arg} "${tmp}" "${REPLY}"
                            fi
                            tmp="${REPLY:=$tmp}"
                            continue
                            ;;
                        "generate --clip")
                            printf "\033[0;32mNew password Directory/Name:\033[0m ${selection}"
                            if [[ -n "$selection" ]]; then
                                printf "\033[0;32m\nPress Return to confirm or type new Directory/Name:\033[0m "
                            fi
                            read -r
                            tmp="${REPLY:=$selection}"
                            printf "\033[0;32mNumber of characters:\033[0m "
                            read -r
                            pass ${arg} --in-place "${tmp}" "${REPLY}" \
                                 2> /dev/null || pass ${arg} "${tmp}" "${REPLY}"
                            tmp="${selection:=$tmp}"
                            printf "\nPress any key to continue. "
                            read -rsn1
                            continue
                            ;;
                        quit)
                            if [[ -z "$selection" ]]; then
                                pkill -P $$
                                break
                            fi
                            continue
                            ;;
                        *)
                            if [[ -n "$selection" ]]; then
                                tmp=${selection::-4} && tmp=${tmp#"$store"}
                                pass ${arg} "${tmp}"
                            else
                                pass ${arg}
                            fi
                            printf "\nPress any key to continue. "
                            read -rsn1
                            continue
                            ;;
                    esac
                fi
            done

            # Close pass tomb, if any
            if [[ -e "$HOME/.password.tomb" ]]; then
                printf "\n"
                pass close
                sudo swapon -a && sudo swapon "${swapfile}" 2> /dev/null
            fi
        }
    fi
fi
