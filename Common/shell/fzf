#!/usr/bin/env bash

#
# fzf
#
if type fzf >/dev/null 2>/dev/null; then
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

    # Use ~~ as the trigger sequence instead of the default **
    # export FZF_COMPLETION_TRIGGER='~~'

    # Options to fzf command
    export FZF_DEFAULT_OPTS='--height 80% --layout=reverse --border --info=inline'
    # export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

    # Use fd (https://github.com/sharkdp/fd) instead of the default find
    # command for listing path candidates.
    # - The first argument to the function ($1) is the base path to start traversal
    # - See the source code (completion.{bash,zsh}) for the details.
    _fzf_compgen_path() {
        fd --hidden --follow --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        fd --type d --hidden --follow --exclude ".git" . "$1"
    }

    #
    # General
    #

    # switch to a project
    function pproj() {
        cd $(find ~/Workspace/Private/Projects/ -maxdepth 2 -type d | fzf)
    }

    function wproj() {
        cd $(find ~/Workspace/Work/Projects/ -maxdepth 2 -type d | fzf)
    }

    # change to an arbitrary subdirectory
    function fcd() {
        cd $(find . -type d | fzf)
    }

    # fuzzy match current directory contents
    function ffuzz() {
        search_term=$1
        find . -wholename \*$search_term\* -not -path './.*/*' | fzf
    }

    # run a command from the history
    function fhist() {
        $(history | cut -c8- | sort -u | fzf)
    }

    #
    # Processes
    #

    # show process id - interactive grep
    function fgrep() {
        ps aux | eval fzf | awk '{ print $2 }'
    }

    # kill processes - list only the ones you can kill.
    function fkill() {
        local pid
        if [ "$UID" != "0" ]; then
            pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
        else
            pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
        fi

        if [ "x$pid" != "x" ]
        then
            echo $pid | xargs kill -${1:-9}
        fi
    }

    #
    # Git
    #

    # fbr - checkout git branch (including remote branches)
    function fbr() {
        local branches branch
        branches=$(git branch --all | grep -v HEAD) &&
            branch=$(echo "$branches" | fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
            git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
    }

    # fco - checkout git branch/tag
    function fco() {
        local tags branches target
        branches=$(
            git --no-pager branch --all \
                --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
                | sed '/^$/d') || return
        tags=$(git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
        target=$(
            (echo "$branches"; echo "$tags") |
                fzf --no-hscroll --no-multi -n 2 \
                    --ansi) || return
        git checkout $(awk '{print $2}' <<<"$target" )
    }

    # fcoc - checkout git commit
    function fcoc() {
        local commits commit
        commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
            commit=$(echo "$commits" | fzf --tac +s +m -e) &&
            git checkout $(echo "$commit" | sed "s/ .*//")
    }

    # fshow - git commit browser
    function fshow() {
        git log --graph --color=always \
            --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
            fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
                --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
    }

    #
    # Tmux
    #
    if type tmux >/dev/null 2>/dev/null; then
        # `ftm_session_new` - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
        # `ftm_session_new` will allow you to select your tmux session via fzf.
        # `ftm_session_new irc` will attach to the irc session (if it exists), else it will create it.
        function ftm_session_new() {
            [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
            if [ $1 ]; then
                tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
            fi
            session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
        }


        # zsh; needs setopt re_match_pcre. You can, of course, adapt it to your own shell easily.
        function ftm_session_kill() {
            local sessions
            sessions="$(tmux ls|fzf --exit-0 --multi)"  || return $?
            local i
            for i in "${(f@)sessions}"
            do
                [[ $i =~ '([^:]*):.*' ]] && {
                    echo "Killing $match[1]"
                    tmux kill-session -t "$match[1]"
                }
            done
        }

        # ftm_session_switch [FUZZY PATTERN] - Select selected tmux session
        #   - Bypass fuzzy finder if there's only one match (--select-1)
        #   - Exit if there's no match (--exit-0)
        function ftm_session_switch() {
            local session
            session=$(tmux list-sessions -F "#{session_name}" | \
                fzf --query="$1" --select-1 --exit-0) &&
                tmux switch-client -t "$session"
        }

        # ftn_pane_switch - switch pane
        function ftm_pane_switch() {
            local panes current_window current_pane target target_window target_pane
            panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
            current_pane=$(tmux display-message -p '#I:#P')
            current_window=$(tmux display-message -p '#I')

            target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

            target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
            target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

            if [[ $current_window -eq $target_window ]]; then
                tmux select-pane -t ${target_window}.${target_pane}
            else
                tmux select-pane -t ${target_window}.${target_pane} &&
                    tmux select-window -t $target_window
            fi
        }
    fi

    #
    # Pass
    #
    if type pass >/dev/null 2>/dev/null; then
        function fpass() {
            local DIR=$(pwd)
            cd "${PASSWORD_STORE_DIR:-${HOME}/.password-store}"
            local PASSFILE=$(tree -Ffi | grep '.gpg' | sed 's/.gpg$//g' | sed 's/^..//' | fzf)
            cd ${DIR}

            if [ ! -z "$PASSFILE" ]; then
                local ACTIONS="Copy Password\nView File\nEdit File\nQuit"
                local CONTINUE=true
                while ${CONTINUE}; do
                    local ACTION=$(echo "${ACTIONS}" | fzf --height 10 --border --header "Pass file ${PASSFILE}")
                    case ${ACTION} in
                        "Copy Password")
                            pass --clip "${PASSFILE}"
                            ;;
                        "View File")
                            pass "${PASSFILE}"
                            ;;
                        "Edit File")
                            pass edit "${PASSFILE}"
                            ;;
                        "Quit") CONTINUE=false ;;
                        *) CONTINUE=false ;;
                    esac
                done
            fi
        }
    fi
fi
