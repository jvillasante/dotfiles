#!/usr/bin/env bash

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 system:"
    echo "        Update OS (debian, opensuse or fedora) & Flatpak"
    echo "    $0 dotfiles:"
    echo "        Update personal dotfiles (ask to pull from remote and then syncs on local)"
    echo "    $0 emacs:"
    echo "        Update emacs from source (will update to latest emacs from git repository)"
    echo "    $0 emacs-lsp-booster:"
    echo "        Update emacs-lsp-booster from binary source"
    echo "    $0 stylua:"
    echo "        Update StyLua from binary source"
    echo "    $0 keyd:"
    echo "        Update keyd from source"
    echo "    $0 xremap:"
    echo "        Update xreamp from binary source"
    echo "    $0 harper:"
    echo "        Update harper from binary source"
    echo
    echo " e.g: $0 system"
    exit "$1"
}

debian_update() {
    sudo apt update -y
    test $? -eq 0 || usage 1

    sudo apt upgrade -y
    test $? -eq 0 || usage 1

    sudo apt full-upgrade
    test $? -eq 0 || usage 1

    sudo apt autoremove
    test $? -eq 0 || usage 1

    sudo flatpak update -y
    test $? -eq 0 || usage 1
}

opensuse_update() {
    # For Leap
    # sudo zypper ref && sudo zypper update
    # test $? -eq 0 || usage 1

    # For Tumbleweed
    sudo zypper ref && sudo zypper dup
    test $? -eq 0 || usage 1

    # Flatpak
    flatpak update --user -y
    test $? -eq 0 || usage 1
}

fedora_update() {
    sudo dnf -y --refresh upgrade
    test $? -eq 0 || usage 1

    sudo dnf -y distro-sync
    test $? -eq 0 || usage 1

    sudo dnf -y autoremove
    test $? -eq 0 || usage 1

    flatpak update --user -y
    test $? -eq 0 || usage 1
}

system_update() {
    local OS
    [[ -f /etc/debian_version ]] && OS=Debian
    [[ -f /etc/products.d/openSUSE.prod ]] && OS=OpenSuse
    [[ -f /etc/fedora-release ]] && OS=Fedora

    [[ $OS == Debian ]] && (hash apt 2> /dev/null || usage 1)
    [[ $OS == OpenSuse ]] && (hash zypper 2> /dev/null || usage 1)
    [[ $OS == Fedora ]] && (hash dnf 2> /dev/null || usage 1)

    [[ $OS == Debian ]] && debian_update
    [[ $OS == OpenSuse ]] && opensuse_update
    [[ $OS == Fedora ]] && fedora_update
}

dotfiles_update() {
    local DOTFILES_DIR
    DOTFILES_DIR="$(find_dotfiles)"
    test $? -eq 0 || usage 1

    if [ -d "$DOTFILES_DIR" ]; then
        git -C "${DOTFILES_DIR}" status
        test $? -eq 0 || usage 1

        if ask "Do you want to pull from remote?"; then
            git -C "${DOTFILES_DIR}" pull
            test $? -eq 0 || usage 1
        fi

        if [ -f "${DOTFILES_DIR}/make.sh" ]; then
            "${DOTFILES_DIR}/make.sh"
            test $? -eq 0 || usage 1
        fi
    fi
}

emacs_update() {
    # Preconditions
    ! hash emacs 2> /dev/null && echo "emacs not installed, exiting..." && usage 1
    [[ ! -d "$HOME"/Workspace/Software ]] &&
        echo "$HOME/Workspace/Software does not exists, exiting..." && usage 1
    [[ ! -d "$HOME"/Workspace/Software/emacs ]] &&
        echo "$HOME/Workspace/Software/emacs does not exists, exiting..." && usage 1

    # Stop the service
    emacsclient --eval '(progn (setq confirm-kill-emacs nil) (save-buffers-kill-emacs))'
    systemctl --user stop emacs.service

    # Prepare git repo
    pushd "$HOME"/Workspace/Software/emacs || usage 1
    sudo make uninstall
    make clean && make distclean
    git reset --hard HEAD
    sudo git clean -dfx
    git fetch && git pull

    # Setup git branch
    local BRANCH
    BRANCH=$(git branch --show-current)
    [[ "$BRANCH" != emacs-30 ]] && git checkout emacs-30
    git fetch && git pull

    # Build and install
    ./autogen.sh
    ./configure \
        --prefix=/usr/local \
        --with-modules \
        --with-pgtk \
        --with-x-toolkit=no \
        --without-compress-install \
        --with-native-compilation=aot \
        --with-tree-sitter \
        --without-mailutils \
        --with-selinux \
        --with-xinput2 \
        --with-dbus \
        --disable-gc-mark-trace \
        CFLAGS="-O3 -fno-math-errno -funsafe-math-optimizations -fno-finite-math-only -fno-trapping-math \
                -freciprocal-math -fno-rounding-math -fno-signaling-nans -fassociative-math \
                -fno-signed-zeros -frename-registers -funroll-loops -mtune=native -march=native \
                -fomit-frame-pointer -fallow-store-data-races -fno-semantic-interposition \
                -floop-parallelize-all -ftree-parallelize-loops=4"
    make -j"$(nproc --ignore=2)"
    sudo make install

    # Cleanup
    popd || usage 1

    # Update packages
    if ask "Emacs has been installed, do you want to update packages now?"; then
        local DOTFILES_DIR
        DOTFILES_DIR="$(find_dotfiles)"
        test $? -eq 0 || usage 1

        # Clean up some trash
        [[ ! -d "$DOTFILES_DIR"/Common/emacs/emacs.d ]] &&
            echo "Emacs personal configuration not found, exiting..." && usage 1
        [[ -d "$DOTFILES_DIR"/Common/emacs/emacs.d/var/eln-cache ]] &&
            rm -rf "$DOTFILES_DIR"/Common/emacs/emacs.d/var/eln-cache
        # [[ -d "$DOTFILES_DIR"/Common/emacs/emacs.d/var/elpa ]] &&
        #     rm -rf "$DOTFILES_DIR"/Common/emacs/emacs.d/var/elpa
        # [[ -d "$DOTFILES_DIR"/Common/emacs/emacs.d/var/tree-sitter ]] &&
        #     rm -rf "$DOTFILES_DIR"/Common/emacs/emacs.d/var/tree-sitter

        # Launch emacs
        /usr/local/bin/emacs --init-directory="$DOTFILES_DIR"/Common/emacs/emacs.d
    fi

    if ask "Emacs packages updated, do you want to start the daemon as a systemd service now?"; then
        systemctl --user daemon-reload
        test $? -eq 0 || usage 1

        systemctl --user enable emacs.service
        test $? -eq 0 || usage 1

        systemctl --user stop emacs.service
        systemctl --user start emacs.service
        test $? -eq 0 || usage 1

        sleep 1 && systemctl --user status emacs.service
        test $? -eq 0 || usage 1
    fi
}

emacs_lsp_booster_update() {
    ! hash emacs-lsp-booster 2> /dev/null && echo "emacs-lsp-booster not installed, exiting..." && usage 1
    [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
    [ ! -d "$HOME"/Workspace/Software/emacs-lsp-booster ] && mkdir -p "$HOME"/Workspace/Software/emacs-lsp-booster
    [ -d "$HOME"/Workspace/Software/emacs-lsp-booster ] && rm -rf "$HOME"/Workspace/Software/emacs-lsp-booster/*

    pushd "$HOME"/Workspace/Software/emacs-lsp-booster || {
        echo "Can't cd into $HOME/Workspace/Software/emacs-lsp-booster"
        usage 1
    }

    EMACS_LSP_BOOSTER_VERSION=v0.2.1
    EMACS_LSP_BOOSTER_RELEASE=emacs-lsp-booster_"$EMACS_LSP_BOOSTER_VERSION"_x86_64-unknown-linux-musl.zip
    curl -LJO https://github.com/blahgeek/emacs-lsp-booster/releases/download/"$EMACS_LSP_BOOSTER_VERSION"/"$EMACS_LSP_BOOSTER_RELEASE"
    atool --extract --explain "$EMACS_LSP_BOOSTER_RELEASE"
    sudo cp -f emacs-lsp-booster /usr/local/bin/

    popd || {
        echo "Can't pop directory"
        usage 1
    }
}

stylua_update() {
    ! hash stylua 2> /dev/null && echo "stylua not installed, exiting..." && usage 1
    [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
    [ ! -d "$HOME"/Workspace/Software/stylua ] && mkdir -p "$HOME"/Workspace/Software/stylua
    [ -d "$HOME"/Workspace/Software/stylua ] && rm -rf "$HOME"/Workspace/Software/stylua/*

    pushd "$HOME"/Workspace/Software/stylua || {
        echo "Can't cd into $HOME/Workspace/Software/stylua"
        usage 1
    }

    # Get the latest
    STYLUA_VERSION=v2.1.0
    STYLUA_RELEASE=stylua-linux-x86_64.zip
    curl -LJO https://github.com/JohnnyMorganz/StyLua/releases/download/"$STYLUA_VERSION"/"$STYLUA_RELEASE"
    atool --extract --explain "$STYLUA_RELEASE"
    sudo cp -f stylua /usr/local/bin/

    popd || {
        echo "Can't pop directory"
        usage 1
    }
}

keyd_update() {
    ! hash keyd 2> /dev/null && echo "keyd not installed, exiting..." && usage 1
    [[ ! -d "$HOME"/Workspace/Software ]] &&
        echo "$HOME/Workspace/Software does not exists, exiting..." && usage 1
    [[ ! -d "$HOME"/Workspace/Software/keyd ]] &&
        echo "$HOME/Workspace/Software/emacs does not exists, exiting..." && usage 1

    # Stop the service
    sudo systemctl stop keyd

    # Prepare git repo
    pushd "$HOME"/Workspace/Software/keyd || usage 1
    sudo make uninstall
    make clean && make distclean
    git reset --hard HEAD
    sudo git clean -dfx
    git pull

    # Install
    make -j"$(nproc --ignore=2)"
    sudo make install

    # Restart daemon
    sudo systemctl start keyd
    sudo keyd reload

    # Cleanup
    popd || usage 1
}

xremap_update() {
    ! hash xremap 2> /dev/null && echo "xremap not installed, exiting..." && usage 1
    [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
    [ ! -d "$HOME"/Workspace/Software/xremap ] && mkdir -p "$HOME"/Workspace/Software/xremap
    [ -d "$HOME"/Workspace/Software/xremap ] && rm -rf "$HOME"/Workspace/Software/xremap/*

    pushd "$HOME"/Workspace/Software/xremap || {
        echo "Can't cd into $HOME/Workspace/Software/xremap"
        usage 1
    }

    # Get the latest
    XREMAP_VERSION=v0.10.10
    XREMAP_RELEASE=xremap-linux-x86_64-kde.zip
    if is_desktop_environment "Gnome"; then
        XREMAP_RELEASE=xremap-linux-x86_64-gnome.zip
    fi

    curl -LJO https://github.com/k0kubun/xremap/releases/download/"$XREMAP_VERSION"/"$XREMAP_RELEASE"
    atool --extract --explain "$XREMAP_RELEASE"
    sudo cp -f xremap /usr/local/bin/

    popd || {
        echo "Can't pop directory"
        usage 1
    }

    # Restart the daemon
    systemctl --user restart xremap.service
}

harper_update() {
    # Is it already installed?
    # ! hash harper-cli 2> /dev/null && echo "Harper not installing, exiting" && usage 1
    # ! hash harper-ls 2> /dev/null && echo "Harper not installing, exiting" && usage 1
    [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
    [ ! -d "$HOME"/Workspace/Software/harper ] && mkdir -p "$HOME"/Workspace/Software/harper
    [ -d "$HOME"/Workspace/Software/harper ] && rm -rf "$HOME"/Workspace/Software/harper/*

    pushd "$HOME"/Workspace/Software/harper || {
        echo "Can't cd into $HOME/Workspace/Software/harper"
        usage 1
    }

    # get the latest
    HARPER_VERSION=v0.27.0
    HARPER_CLI_RELEASE=harper-cli-x86_64-unknown-linux-gnu.tar.gz
    HARPER_LS_RELEASE=harper-ls-x86_64-unknown-linux-gnu.tar.gz

    curl -LJO https://github.com/Automattic/harper/releases/download/"$HARPER_VERSION"/"$HARPER_CLI_RELEASE"
    atool --extract --explain "$HARPER_CLI_RELEASE"
    sudo cp -f harper-cli /usr/local/bin/

    curl -LJO https://github.com/Automattic/harper/releases/download/"$HARPER_VERSION"/"$HARPER_LS_RELEASE"
    atool --extract --explain "$HARPER_LS_RELEASE"
    sudo cp -f harper-ls /usr/local/bin/

    popd || {
        echo "Can't cd to previous directory"
        usage 1
    }
}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

. "$HOME/.config/shell/common.sh"

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    system)
        [[ "$nargs" -eq 1 ]] || usage 1
        system_update
        ;;
    dotfiles)
        [ "$nargs" -eq 1 ] || usage 1
        dotfiles_update
        ;;
    emacs)
        [[ "$nargs" -eq 1 ]] || usage 1
        emacs_update
        ;;
    emacs-lsp-booster)
        [[ "$nargs" -eq 1 ]] || usage 1
        emacs_lsp_booster_update
        ;;
    stylua)
        [[ "$nargs" -eq 1 ]] || usage 1
        stylua_update
        ;;
    keyd)
        [[ "$nargs" -eq 1 ]] || usage 1
        keyd_update
        ;;
    xremap)
        [[ "$nargs" -eq 1 ]] || usage 1
        xremap_update
        ;;
    harper)
        [[ "$nargs" -eq 1 ]] || usage 1
        harper_update
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
