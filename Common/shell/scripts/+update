#!/usr/bin/env bash

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 system:"
    echo "        Update OS (debian, opensuse or fedora) & Flatpak"
    echo "    $0 dotfiles:"
    echo "        Update personal dotfiles (ask to pull from remote and then syncs on local)"
    echo "    $0 emacs:"
    echo "        Update emacs from source (will update to latest emacs from git repository)"
    echo
    echo " e.g: $0 system"
    exit "$1"
}

debian_update() {
    sudo apt update -y
    test $? -eq 0 || usage 1

    sudo apt upgrade -y
    test $? -eq 0 || usage 1

    sudo apt full-upgrade
    test $? -eq 0 || usage 1

    sudo apt autoremove
    test $? -eq 0 || usage 1

    sudo flatpak update -y
    test $? -eq 0 || usage 1
}

opensuse_update() {
    flatpak update --user -y
    test $? -eq 0 || usage 1

    # For Leap
    # sudo zypper ref && sudo zypper update
    # test $? -eq 0 || usage 1

    # For Tumbleweed
    sudo zypper ref && sudo zypper dup
    test $? -eq 0 || usage 1
}

fedora_update() {
    sudo dnf -y --refresh upgrade
    test $? -eq 0 || usage 1

    sudo dnf -y distro-sync
    test $? -eq 0 || usage 1

    sudo dnf -y autoremove
    test $? -eq 0 || usage 1

    sudo flatpak update -y
    test $? -eq 0 || usage 1
}

system_update() {
    local OS
    [[ -f /etc/debian_version ]] && OS=Debian
    [[ -f /etc/products.d/openSUSE.prod ]] && OS=OpenSuse
    [[ -f /etc/fedora-release ]] && OS=Fedora

    [[ $OS == Debian ]] && (hash apt 2> /dev/null || usage 1)
    [[ $OS == OpenSuse ]] && (hash zypper 2> /dev/null || usage 1)
    [[ $OS == Fedora ]] && (hash dnf 2> /dev/null || usage 1)

    [[ $OS == Debian ]] && debian_update
    [[ $OS == OpenSuse ]] && opensuse_update
    [[ $OS == Fedora ]] && fedora_update
}

dotfiles_update() {
    local DOTFILES_DIR
    DOTFILES_DIR="$(find_dotfiles)"
    test $? -eq 0 || usage 1

    if [ -d "$DOTFILES_DIR" ]; then
        git -C "${DOTFILES_DIR}" status
        test $? -eq 0 || usage 1

        if ask "Do you want to pull from remote?"; then
            git -C "${DOTFILES_DIR}" pull
            test $? -eq 0 || usage 1
        fi

        if [ -f "${DOTFILES_DIR}/make.sh" ]; then
            "${DOTFILES_DIR}/make.sh"
            test $? -eq 0 || usage 1
        fi
    fi
}

emacs_update() {
    # Preconditions
    ! hash emacs 2> /dev/null && echo "emacs not installed, exiting..." && usage 1
    [[ ! -d "$HOME"/Workspace/Software ]] && echo "$HOME/Workspace/Software does not exists, exiting..." && usage 1
    [[ ! -d "$HOME"/Workspace/Software/emacs ]] && echo "$HOME/Workspace/Software/emacs does not exists, exiting..." && usage 1

    # Stop the service
    emacsclient --eval '(save-buffers-kill-emacs)'
    systemctl --user stop emacs.service

    # Prepare git repo
    pushd "$HOME"/Workspace/Software/emacs || usage 1
    sudo make uninstall
    make clean && make distclean
    git reset --hard HEAD
    sudo git clean -dfx
    git pull

    # Build (emacs-29) and install
    local BRANCH
    BRANCH=$(git branch --show-current)
    [[ "$BRANCH" != emacs-29 ]] && git checkout emacs-29
    ./autogen.sh

    EMACS_WINDOW_SYSTEM_OPTION=--with-x
    [[ "$XDG_SESSION_TYPE" == wayland ]] && EMACS_WINDOW_SYSTEM_OPTION=--with-pgtk
    ./configure \
        $EMACS_WINDOW_SYSTEM_OPTION \
        --without-compress-install \
        --with-native-compilation=aot \
        --with-tree-sitter \
        --with-json \
        --with-mailutils \
        CFLAGS="-O2 -mtune=native -march=native -fomit-frame-pointer" prefix=/usr/local
    make -j"$(nproc --ignore=2)"
    sudo make install

    # Cleanup
    popd || usage 1

    # Update packages
    if ask "Emacs has been installed, do you want to update packages now?"; then
        local DOTFILES_DIR
        DOTFILES_DIR="$(find_dotfiles)"
        test $? -eq 0 || usage 1

        [[ ! -d "$DOTFILES_DIR"/Common/emacs/personal ]] && echo "Emacs personal configuration not found, exiting..." && usage 1
        [[ -d "$DOTFILES_DIR"/Common/emacs/personal/var ]] && rm -rf "$DOTFILES_DIR"/Common/emacs/personal/var
        emacs --init-directory="$DOTFILES_DIR"/Common/emacs/personal
    fi

    if ask "Emacs packages updated, do you want to start the daemon as a systemd service now?"; then
        systemctl --user daemon-reload
        test $? -eq 0 || usage 1

        systemctl --user enable emacs.service
        test $? -eq 0 || usage 1

        systemctl --user start emacs.service
        test $? -eq 0 || usage 1

        sleep 1 && systemctl --user status emacs.service
        test $? -eq 0 || usage 1
    fi
}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

. "$HOME/.config/shell/common.sh"

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    system)
        [[ "$nargs" -eq 1 ]] || usage 1
        system_update
        ;;
    dotfiles)
        [ "$nargs" -eq 1 ] || usage 1
        dotfiles_update
        ;;
    emacs)
        [[ "$nargs" -eq 1 ]] || usage 1
        emacs_update
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
