#!/usr/bin/env bash

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 install:"
    echo "        Install OpenSuse System"
    echo "    $0 update:"
    echo "        Update OpenSuse System"
    echo "    $0 zipper [arbitrary zipper command]:"
    echo "        Run arbitrary zipper command"
    echo
    echo " e.g: $0 zipper update"
    exit "$1"
}

suse_install() {
    HEIGHT=25
    WIDTH=100
    CHOICE_HEIGHT=4
    BACKTITLE="OpenSuse Setup Util"
    TITLE="Please Make a selection"
    MENU="Please Choose one of the following options:"

    # Check to see if Dialog is installed, if not install it
    hash dialog 2>/dev/null || sudo zypper install -y dialog
    hash notify-send 2>/dev/null || sudo zypper install -y libnotify

    OPTIONS=(
        1 "Do a full system upgrade - Do a full system upgrade (reboot if needed)"
        2 "Setup Defaults - Set some defaults (hostname, folders structure, gsettings, etc)"
        3 "Post Install  - Post install setup (zram, etc)"
        4 "Firmware Update - Update Firmware (reboot needed)"
        5 "Install NVIDIA - Install NVIDIA Drivers (reboot needed)"
        6 "Install Software - Installs a bunch of my most used software"
        7 "Install Extras - Themes Fonts and Codecs"
        8 "Enable Flatpak - Enables the Flatpak repo and installs packages"
        9 "Setup Secrets and Repos - Setup ssh and gpg from backups and get git repos"
        10 "Install Emacs - Install Emacs"
        11 "Install Keyd - Install Keyd from source"
        12 "Quit")

    while true; do
        CHOICE=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "$TITLE" \
            --nocancel \
            --menu "$MENU" \
            $HEIGHT $WIDTH $CHOICE_HEIGHT \
            "${OPTIONS[@]}" \
            2>&1 >/dev/tty)

        clear
        case $CHOICE in
            1)
                echo "$CHOICE) Full System Upgrade"
                sudo zypper ref
                sudo zypper update
                sudo zypper dup

                read -p "$CHOICE) Full System Upgrade Done (May need to reboot). Press enter to continue..."
                ;;
            2)
                echo "$CHOICE) Setting Defaults"

                # hostname
                read -r -p "Enter pretty hostname (defaults to 'Julio's Personal Laptop'): " HOSTNAME_PRETTY
                [ -z "$HOSTNAME_PRETTY" ] && HOSTNAME_PRETTY="Julio's Personal Laptop"
                hostnamectl set-hostname --pretty "$HOSTNAME_PRETTY"

                read -r -p "Enter static hostname (defaults to 'opensuse'): " HOSTNAME_STATIC
                [ -z "$HOSTNAME_STATIC" ] && HOSTNAME_STATIC="opensuse"
                hostnamectl set-hostname --static "$HOSTNAME_STATIC"

                # xdg
                export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
                export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
                export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
                export XDG_LIB_HOME="${XDG_DATA_HOME:-$HOME/.local/lib}"
                export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
                mkdir -p \
                    "${XDG_CACHE_HOME}" \
                    "${XDG_CONFIG_HOME}" \
                    "${XDG_DATA_HOME}" \
                    "${XDG_LIB_HOME}" \
                    "${XDG_STATE_HOME}"

                # Folder structure
                mkdir -p "$HOME/Workspace"
                mkdir -p "$HOME/Workspace/Books"
                mkdir -p "$HOME/Workspace/Private/Projects"
                mkdir -p "$HOME/Workspace/Public"
                mkdir -p "$HOME/Workspace/Software"
                mkdir -p "$HOME/Workspace/Stuff"
                mkdir -p "$HOME/Workspace/Work"
                mkdir -p "$HOME/Workspace/Work/Projects"
                mkdir -p "$HOME/Workspace/Work/Software"
                mkdir -p "$HOME/Workspace/Work/Stuff"

                # Gsettings - dconf-editor
                #  - View current settings - gsettings list-recursively org.gnome.desktop.interface
                #  - Reset to default setting - gsettings reset org.gnome.desktop.interface enable-animations

                # Clock Settings
                gsettings set org.gnome.desktop.interface clock-format '12h'
                gsettings set org.gnome.desktop.interface clock-show-date true
                gsettings set org.gnome.desktop.interface clock-show-seconds false
                gsettings set org.gnome.desktop.interface clock-show-weekday false

                # No hot corners
                gsettings set org.gnome.desktop.interface enable-hot-corners false

                # Emacs please
                gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'

                # Show battery
                gsettings set org.gnome.desktop.interface show-battery-percentage true

                # Enable window buttons
                gsettings set org.gnome.desktop.wm.preferences button-layout ':minimize,maximize,close'

                # Set new windows centered
                gsettings set org.gnome.mutter center-new-windows true

                # Set list-view for Nautilius
                gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'

                # Set fractional scaling (only for wayland)
                # gsettings set org.gnome.mutter experimental-features "['scale-monitor-framebuffer']"

                # Stop Gnome Software downloading updates
                gsettings set org.gnome.software download-updates false

                read -p "$CHOICE) Defaults has been set. Press enter to continue..."
                ;;
            3)
                echo "$CHOICE) Post Install Setup"

                # Setup zram (even with swap zram will have a higher priority)
                if ! test "$(cat /proc/swaps | grep /dev/zram)"; then
                    sudo zypper -y in systemd-zram-service
                    echo -e "\n#Custom Settings" | sudo tee -a /etc/sysctl.conf
                    echo -e "\nvm.vfs_cache_pressure=500 # increase frequency of clearing caches to free RAM" | sudo tee -a /etc/sysctl.conf
                    echo -e "\nvm.swappiness=150 # increase percentage to start using zram earlier" | sudo tee -a /etc/sysctl.conf
                    echo -e "\nvm.dirty_background_ratio=1 # amount of memory pages permitted to be 'dirty' before writing to zram" | sudo tee -a /etc/sysctl.conf
                    echo -e "\nvm.dirty_ratio=50 # amount of memory pages permitted to be 'dirty' before writing to zram" | sudo tee -a /etc/sysctl.conf
                    sudo systemctl enable zramswap.service && sudo systemctl start zramswap.service
                fi

                sudo zypper ref && sudo zypper update
                read -p "$CHOICE) Post Install Setup Complete . Press enter to continue..."
                ;;
            4)
                echo "$CHOICE) Updating Firmware"
                sudo fwupdmgr get-devices
                sudo fwupdmgr refresh --force
                sudo fwupdmgr get-updates
                sudo fwupdmgr update

                sudo zypper ref && sudo zypper update
                read -p "$CHOICE) Latest Firmware installed, we need to reboot to finalize driver installation. Press enter to continue..."
                ;;
            5)
                echo "$CHOICE) Installing NVIDIA Drivers. We need to disable secure boot on the bios for NVIDIA Drivers to be loaded."

                # TODO

                read -p "$CHOICE) NVIDIA Drivers installed, we need to reboot to finalize driver installation. Press enter to continue..."
                ;;
            6)
                echo "$CHOICE) Installing Software"

                # general
                sudo zypper install -y -t pattern devel_basis
                sudo zypper install -y -t pattern devel_C_C++
                sudo zypper install -y rpmdevtools make gcc-c++ gcc gdb automake autoconf libtool
                sudo zypper install -y git ripgrep fd xclip xprop xwininfo htop btop
                sudo zypper install -y aspell aspell-en aspell-es autojump atool autoconf automake bat cmake vim
                sudo zypper install -y curl dconf-editor dos2unix doxygen msmtp neofetch
                sudo zypper install -y graphviz htop mercurial exa ninja password-store
                sudo zypper install -y nodejs19 npm19 pandoc poppler-tools poppler-data
                sudo zypper install -y subversion tree w3m wget libtool texinfo
                sudo zypper install -y wordnet shfmt editorconfig ShellCheck xdotool
                sudo zypper install -y llvm clang clang-tools libpcap libpcap-devel
                sudo zypper install -y pkg-config openssl openssl-devel flex bison unar unrar unzip
                sudo zypper install -y ImageMagick ImageMagick-devel sqlite
                sudo zypper install -y valgrind minicom mc strace tidy

                # wayland stuff
                sudo zypper install -y wl-clipboard

                # tmux: A terminal multiplexer
                sudo zypper install -y tmux

                # alacritty
                sudo zypper install -y alacritty

                # Starship Prompt
                curl -sS https://starship.rs/install.sh | sh

                # gpg
                sudo zypper install -y pcsc-tools opensc pcsc-lite pcsc-ccid
                sudo systemctl enable pcscd && sudo systemctl start pcscd

                # yubikey
                sudo zypper install -y yubikey-manager

                # ncdu (text-based disk usage viewer)
                sudo zypper install -y ncdu

                # Borg Backup
                sudo zypper install -y borgbackup

                # Command Line Fuzzy Finder
                sudo zypper install -y fzf

                # Neovim
                sudo zypper install -y neovim python3-neovim

                # Profile sync daemon
                sudo zypper install -y profile-sync-daemon
                [ -f /usr/share/psd/contrib/brave ] && sudo cp /usr/share/psd/contrib/brave /usr/share/psd/browsers
                systemctl --user enable psd.service && systemctl --user start psd.service

                # non zypper software
                pip install cmake-language-server
                sudo npm install --global npm@latest
                sudo npm install --global prettier
                sudo npm install --global js-beautify
                sudo npm install --global typescript-language-server typescript
                sudo npm install --global dockerfile-language-server-nodejs
                sudo npm install --global bash-language-server

                sudo zypper ref && sudo zypper update
                read -p "$CHOICE) Software has been installed. Press enter to continue..."
                ;;
            7)
                echo "$CHOICE) Installing Extras"

                #
                # Multimedia codecs
                #
                sudo zypper install -y opi
                opi codecs

                #
                # TLP
                #
                hash tlp 2>/dev/null || sudo zypper install -y tlp tlp-rdw

                # Create TLP config
                sudo mkdir -p /etc/tlp.d
                sudo cp /etc/tlp.conf /etc/tlp.d/01-myconfig.conf

                # Set TLP config values
                # sudo_config_set /etc/tlp.d/01-myconfig.conf USB_AUTOSUSPEND 0
                # sudo_config_set /etc/tlp.d/01-myconfig.conf TLP_DEFAULT_MODE BAT
                # sudo_config_set /etc/tlp.d/01-myconfig.conf TLP_PERSISTENT_DEFAULT 1

                # Enable TLP service
                sudo systemctl mask systemd-rfkill.service systemd-rfkill.socket
                sudo systemctl enable tlp.service && sudo systemctl start tlp.service

                #
                # Fonts
                #
                sudo zypper install -y iosevka-fonts fira-code-fonts jetbrains-mono-fonts

                # Gnome Font Settings
                gsettings set org.gnome.desktop.interface monospace-font-name 'Iosevka Term 16'

                #
                # Docker
                #

                # Install and Enable Docker
                sudo zypper install -y docker
                sudo systemctl enable docker && sudo systemctl start docker

                # add user
                sudo usermod -G docker -a $USER
                sudo systemctl restart docker

                # test we can run docker without `sudo`
                # docker run hello-world

                #
                # Latex
                #
                # sudo zypper install -y texlive-scheme-full

                sudo zypper ref && sudo zypper update
                read -p "$CHOICE) Multimedia, TLP, fonts and others has been installed. Press enter to continue..."
                ;;
            8)
                echo "$CHOICE) Enabling Flatpak"
                sudo zypper install -y flatpak
                flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
                flatpak update
                flatpak install -y flathub org.gnome.Extensions
                flatpak install -y flathub org.gnome.Firmware
                flatpak install -y flathub com.discordapp.Discord
                flatpak install -y flathub com.dropbox.Client
                flatpak install -y flathub com.skype.Client
                flatpak install -y flathub com.slack.Slack
                flatpak install -y flathub org.telegram.desktop
                flatpak install -y flathub org.videolan.VLC
                flatpak install -y flathub com.transmissionbt.Transmission
                flatpak install -y flathub org.gimp.GIMP
                flatpak install -y flathub org.wireshark.Wireshark
                flatpak install -y flathub com.github.tchx84.Flatseal
                flatpak install -y flathub org.shotcut.Shotcut
                # flatpak install -y flathub com.brave.Browser
                # flatpak install -y flathub io.github.mimbrero.WhatsAppDesktop
                # flatpak install -y flathub org.signal.Signal
                # flatpak install -y flathub com.microsoft.Edge
                # flatpak install -y flathub com.visualstudio.code
                # flatpak install -y flathub com.github.GradienceTeam.Gradience

                read -p "$CHOICE) Flatpak has now been enabled. Press enter to continue..."
                ;;
            9)
                echo "$CHOICE) Setting up secrets and repos"
                read -r -p "Enter keys backup directory: " KEYS_DIR
                KEYS_DIR=${KEYS_DIR%/}
                [ ! -d "$KEYS_DIR" ] && notify-send "$KEYS_DIR is not a directory" --expire-time=20 && continue
                [ ! -f "+crypt" ] && notify-send "$(pwd)/+crypt script does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/ssh.tar.gz.gpg" ] && notify-send "$KEYS_DIR/ssh.tar.gz.gpg does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/gpg.tar.gz.gpg" ] && notify-send "$KEYS_DIR/gpg.tar.gz.gpg does not exists" --expire-time=20 && continue

                echo ">> Setting up ssh keys from $KEYS_DIR/ssh.tar.gz.gpg"
                "./+crypt" -d "$KEYS_DIR/ssh.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/ssh ] && notify-send "Decryption failed, $KEYS_DIR/ssh does not exists" --expire-time=20 && continue
                mkdir -p ~/.ssh && rm -rf ~/.ssh/*
                cp "$KEYS_DIR"/ssh/id_* ~/.ssh
                cp "$KEYS_DIR"/ssh/config ~/.ssh
                chmod 700 ~/.ssh
                chmod 644 ~/.ssh/config
                chmod 600 ~/.ssh/id_*
                chmod 644 ~/.ssh/id_*.pub
                rm -rf "$KEYS_DIR"/ssh

                echo ">> Setting up gpg keys from $KEYS_DIR/gpg.tar.gz.gpg"
                "./+crypt" -d "$KEYS_DIR/gpg.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/gpg ] && notify-send "Decryption failed, $KEYS_DIR/gpg does not exists" --expire-time=20 && continue
                mkdir -p ~/.gnupg && rm -rf ~/.gnupg/*
                cp "$KEYS_DIR"/gpg/config/*.conf ~/.gnupg
                gpg --import "$KEYS_DIR"/gpg/new_keys/0xB3F739419D91C7F3-2022-09-28.pub.asc
                rm -rf "$KEYS_DIR"/gpg

                echo "Editing gpg key 0xB3F..., you should 'trust' ultimately (Option 5) and 'quit'"
                gpg --edit-key 0xB3F739419D91C7F3

                # Remove keys
                rm -rf "$KEYS_DIR"

                # With the new keys we can go ahead and download some repos
                [ ! -d "$HOME/.password-store" ] && git clone git@github.com:jvillasante/pass.git "$HOME"/.password-store
                [ ! -d "$HOME"/Workspace/Public/dotfiles ] && git clone git@github.com:jvillasante/dotfiles.git "$HOME"/Workspace/Public/dotfiles
                [ ! -d "$HOME"/Workspace/Public/resume ] && git clone git@github.com:jvillasante/resume.git "$HOME"/Workspace/Public/resume

                read -p "$CHOICE) Secrets and repos are set. Press enter to continue..."
                ;;
            10)
                echo "$CHOICE) Installing Emacs"

                # Is it already installed?
                hash emacs 2>/dev/null && notify-send "Emacs is already installed" --expire-time=20 && continue

                # Install dependencies
                sudo zypper install -y libgccjit0-devel-gcc12 # check it is the same version as installed gcc (gcc --version)
                sudo zypper install -y gtk3-devel libgnutls-devel libxml2-devel libjansson-devel giflib-devel libtiff-devel libotf-devel
                sudo zypper install -y tree-sitter tree-sitter-devel

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/emacs ]; then
                    git clone git://git.sv.gnu.org/emacs.git "$HOME"/Workspace/Software/emacs
                    pushd "$HOME"/Workspace/Software/emacs || {
                        notify-send "Can't cd into $HOME/Workspace/Software/emacs" --expire-time=20
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/emacs || {
                        notify-send "Can't cd into $HOME/Workspace/Software/emacs" --expire-time=20
                        continue
                    }

                    sudo make uninstall
                    make clean && make distclean
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Build and install (emacs-29)
                git checkout emacs-29
                ./autogen.sh
                ./configure --with-pgtk --with-native-compilation --with-tree-sitter --with-json \
                    CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer" prefix=/usr/local
                make -j16
                sudo make install

                popd || notify-send "Can't cd to previous directory" --expire-time=20
                read -p "$CHOICE) Emacs has been installed. Press enter to continue..."
                ;;
            11)
                echo "$CHOICE) Installing Keyd"

                # Is it already installed?
                hash keyd 2>/dev/null && notify-send "Keyd is already installed" --expire-time=20 && continue

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                if [ ! -d "$HOME"/Workspace/Software/keyd ]; then
                    git clone git@github.com:rvaiya/keyd.git "$HOME"/Workspace/Software/keyd
                    pushd "$HOME"/Workspace/Software/keyd || {
                        notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=20
                        continue
                    }
                else
                    pushd "$HOME"/Workspace/Software/keyd || {
                        notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=20
                        continue
                    }

                    sudo make uninstall
                    make clean && make distclean
                    git reset --hard HEAD
                    sudo git clean -dfx
                    git pull
                fi

                # Install
                make -j16
                sudo make install

                # Copy Configuration
                sudo cp "$HOME"/Workspace/Public/dotfiles/Common/keyd/default.conf /etc/keyd/default.conf

                # Enable the daemon
                sudo systemctl enable keyd && sudo systemctl start keyd
                sudo keyd reload

                popd || notify-send "Can't cd to previous directory" --expire-time=20
                read -p "$CHOICE) Keyd daemon has been installed. Press enter to continue..."
                ;;
            12)
                exit 0
                ;;
        esac
    done
}

suse_update() {
    sudo flatpak update -y
    test $? -eq 0 || usage 1

    sudo zypper ref
    test $? -eq 0 || usage 1

    sudo zypper update
    test $? -eq 0 || usage 1

    sudo zypper dup
    test $? -eq 0 || usage 1
}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

if [ ! -f /etc/products.d/openSUSE.prod ]; then
    echo "Error: OpenSuse is not running on this system, exiting..."
    exit 1
fi

if ! hash zypper 2>/dev/null; then
    echo "Error: zypper not installed on this system, exiting..."
    exit 1
fi

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    install)
        [ "$nargs" -eq 1 ] || usage 1
        suse_install "$@"
        ;;
    update)
        [ "$nargs" -eq 1 ] || usage 1
        suse_update "$@"
        ;;
    zypper)
        [ "$nargs" -lt 2 ] && usage 1
        zypper "$@"
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
