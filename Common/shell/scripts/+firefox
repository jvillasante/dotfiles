#!/usr/bin/env bash

# shellcheck source=/dev/null
source "$HOME/.config/shell/common"

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 update:"
    echo "        Update Firefox Default profile with my overrides"
    echo "    $0 cleanup:"
    echo "        Cleanup Firefox Default profile overrides"
    echo
    echo "    e.g: $0 update"
    echo "    e.g: $0 cleanup"
    echo
    exit "$1"
}

firefox_default_profile() {
    local PROFILE_DIR PROFILE_NAME PROFILE

    # flatpak firefox takes precedence
    if [ -d "$HOME"/.var/app/org.mozilla.firefox/.mozilla/firefox ]; then
        PROFILE_DIR="$HOME"/.var/app/org.mozilla.firefox/.mozilla/firefox
    else
        PROFILE_DIR="$HOME"/.mozilla/firefox
    fi
    [ -z "$PROFILE_DIR" ] && usage 1

    PROFILE_NAME=$(grep "Default=.*\.default*" "$PROFILE_DIR/profiles.ini" | cut -d"=" -f2)
    [ -z "$PROFILE_NAME" ] && usage 1

    PROFILE="$PROFILE_DIR/$PROFILE_NAME"
    [ -d "$PROFILE" ] || usage 1

    echo "$PROFILE"
}

cleanup() {
    local PROFILE
    if pgrep firefox > /dev/null; then
        echo ">>> Firefox is running. Close Firefox and try again."
        usage 1
    fi

    PROFILE=$(firefox_default_profile)
    test $? -eq 0 || usage 1
    echo ">>> Cleaning 'user.js' file for $PROFILE"

    [ -f "${PROFILE}"/user.js ] && rm -f "${PROFILE}"/user.js
    [ -f "${PROFILE}"/user-overrides.js ] && rm -f "${PROFILE}"/user-overrides.js

    echo "All done!"
    echo
}

update() {
    local PROFILE
    if pgrep firefox > /dev/null; then
        echo ">>> Firefox is running. Close Firefox and try again."
        usage 1
    fi

    PROFILE=$(firefox_default_profile)
    test $? -eq 0 || usage 1
    echo ">>> Updating 'user.js' file for $PROFILE"

    # Cleanup
    [ -f "${PROFILE}"/user.js ] && rm -f "${PROFILE}"/user.js
    [ -f "${PROFILE}"/user-overrides.js ] && rm -f "${PROFILE}"/user-overrides.js

    # Get latest
    curl -o "${PROFILE}"/user.js https://raw.githubusercontent.com/yokoffing/Betterfox/main/user.js
    test $? -eq 0 || usage 1

    # Add overrides
    cat > "${PROFILE}/user-overrides.js" << ENDOFFILE
// Re-enables 'about:home' page for startup landing page and new tabs
user_pref("browser.startup.page", 1);
user_pref("browser.startup.homepage", "about:home");
user_pref("browser.newtabpage.enabled", true);
user_pref("browser.newtab.preload", true);

// Disables Pocket extension
user_pref("extensions.pocket.enabled", false);

// Make tabbar height smaller
user_pref("browser.uidensity", 1);

// Disable show menu on ALT press
user_pref("ui.key.menuAccessKeyFocuses", false);

// Enable container tabs
user_pref("privacy.userContext.enabled", true);

// Disable login manager
user_pref("signon.rememberSignons", false);

// Disable address and credit card manager
user_pref("extensions.formautofill.addresses.enabled", false);
user_pref("extensions.formautofill.creditCards.enabled", false);

// Do not allow embedded tweets, Instagram, Reddit, and Tiktok posts
user_pref("urlclassifier.trackingSkipURLs", "");
user_pref("urlclassifier.features.socialtracking.skipURLs", "");

// Enable HTTPS-Only Mode
user_pref("dom.security.https_only_mode", true);
user_pref("dom.security.https_only_mode_error_page_user_suggestions", true);

// Set DoH provider
user_pref("network.trr.uri", "https://dns.quad9.net/dns-query");

// Enforce DNS-over-HTTPS (DoH)
user_pref("network.trr.mode", 3);

// Run on the GPU
user_pref("layers.acceleration.force-enabled", true);

// 1=always block, 2=you want to be prompted for every site that tries to autoplay
user_pref("media.autoplay.default", 1);

// Do not use disk for caches
user_pref("browser.cache.disk.enable", false)

/* END: internal custom pref to test for syntax errors ***/
user_pref("_user.js.parrot", "SUCCESS: No no he's not dead, he's, he's restin'!");
ENDOFFILE
    test $? -eq 0 || usage 1

    echo "All done!"
    echo
}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    update)
        [ "$nargs" -eq 1 ] || usage 1
        update "$@"
        ;;
    cleanup)
        [ "$nargs" -eq 1 ] || usage 1
        cleanup "$@"
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
