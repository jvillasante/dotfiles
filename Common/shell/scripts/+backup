#!/usr/bin/env bash

#
# Backups and restore folders using `borg` command.
#

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace

if ! type borg > /dev/null 2>&1; then
    echo "You need to install borg first, exiting..."
    exit 1
fi

# Derived information
export BORG_CACHE_DIR=/home/"$USER"/.cache/borgbackup/

# Setting this, so the repo does not need to be given on the commandline:
# export BORG_REPO=/run/media/"$USER"/Toshiba/borgbackup/
export BORG_REPO=ssh://synology-backup.lan/volume1/BorgBackup

# See the section "Passphrase notes" for more infos.
BORG_PASSPHRASE=$(pass Apps/borgbackup | head -n 1)
export BORG_PASSPHRASE

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 init:"
    echo "        Initialize a new borg repo"
    echo "    $0 list:"
    echo "        List all borg archives in repo"
    echo "    $0 info [ARCHIVE]:"
    echo "        Information about entire borg repo or ARCHIVE (if present)"
    echo "    $0 check:"
    echo "        Check both borg repo and archives"
    echo "    $0 create"
    echo "        Create borg archive with format hostname_time in repo"
    echo "    $0 delete [ARCHIVE]:"
    echo "        Delete entire borg repo or ARCHIVE (if present)"
    echo "    $0 extract ARCHIVE:"
    echo "        Extract borg ARCHIVE on the current directory"
    echo "    $0 borg [arbitrary borg command-line]"
    echo "        Run arbitrary borg command"
    echo
    echo " e.g: $0 extract archive_2022-04-28T17:01:12"
    echo " e.g: $0 borg extract --dry-run --list -v ::archive_2022-04-28T17:01:12"
    echo " e.g: $0 borg extract --list -v ::archive_2022-04-28T17:01:12 path/to/dir/"
    echo " e.g: mkdir /tmp/borg/ && $0 borg mount ::archive_2022-04-28T17:01:12 /tmp/borg"
    exit "$1"
}

info() { printf "\n%s %s\n\n" "$(date)" "$*" >&2; }

do_ssh_backup() {
    read -rp "ssh backup to dropbox, symetric gpg with password prompt. Proceed? (Y/N): " confirm
    if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
        [ ! -d "$HOME/.ssh" ] &&
            info "$HOME/.ssh does not exists" && exit 1

        [ ! -f "$HOME/.ssh.tar.gz.gpg" ] && rm -f "$HOME/.ssh.tar.gz.gpg"
        +crypt -e -s "$HOME/.ssh" > /dev/null 2>&1;
        [ ! -f "$HOME/.ssh.tar.gz.gpg" ] &&
            info "Could not create $HOME/.ssh.tar.gz.gpg" && exit 1

        if [ -f "$HOME/Dropbox/Personal/secrets/keys/ssh.tar.gz.gpg" ]; then
            [ -f "$HOME/Dropbox/Personal/secrets/keys/ssh.old.tar.gz.gpg" ] &&
                rm -f "$HOME/Dropbox/Personal/secrets/keys/ssh.old.tar.gz.gpg"
            mv "$HOME/Dropbox/Personal/secrets/keys/ssh.tar.gz.gpg" \
               "$HOME/Dropbox/Personal/secrets/keys/ssh.old.tar.gz.gpg"
            [ ! -f "$HOME/Dropbox/Personal/secrets/keys/ssh.old.tar.gz.gpg" ] &&
                info "Could not create $HOME/Dropbox/Personal/secrets/keys/ssh.old.tar.gz.gpg" && exit 1
        fi

        mv "$HOME/.ssh.tar.gz.gpg" "$HOME/Dropbox/Personal/secrets/keys/ssh.tar.gz.gpg"
        [ ! -f "$HOME/Dropbox/Personal/secrets/keys/ssh.tar.gz.gpg" ] &&
            info "Could not create $HOME/Dropbox/Personal/secrets/keys/ssh.tar.gz.gpg" && exit 1
    else
        info "Skipping ssh backup..."
    fi

    echo 0
}

do_borg_backup() {
    # some helpers and error handling:
    trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

    info "Starting borg backup"

    # Backup the most important directories into an archive named after the machine this script is currently running on
    borg create \
        --verbose \
        --filter AME \
        --list \
        --stats \
        --show-rc \
        --compression auto,lzma,6 \
        --exclude-caches \
        --exclude '/var/tmp/*' \
        --exclude '/home/**/.cache/*' \
        --exclude '/home/**/.DS_Store' \
        --exclude '/home/**/*.pyc' \
        --exclude '/home/**/*.*~' \
        --exclude '/home/**/.#*' \
        --exclude '/home/**/*.o' \
        --exclude '/home/**/*.so' \
        --exclude '/home/**/*.lo' \
        --exclude '/home/**/*.rs.bk' \
        --exclude '/home/**/.SynologyNAS' \
        --exclude '/home/*/VirtualBox VMs*' \
        --exclude '/home/*/Virtualbox VMs*' \
        --exclude '/home/*/Desktop/*.desktop' \
        --exclude '/home/*/Dropbox' \
        --exclude '/home/*/Workspace/Public/' \
        --exclude '/home/*/Workspace/Software/' \
        --exclude '/home/*/Workspace/Work/Nielsen/Firmware/' \
        --exclude '/home/*/Workspace/Work/Nielsen/Software/' \
        --exclude '/home/*/Workspace/Work/Nielsen/Profishark/' \
        --exclude '/home/*/Workspace/Work/Nielsen/captures/' \
        --exclude '/home/*/Workspace/Work/Nielsen/agw/captures/' \
        --exclude '/home/*/Workspace/Work/Nielsen/Projects/dmxs/bin' \
        --exclude '/home/*/Workspace/Work/Nielsen/Projects/dmxs/inc' \
        --exclude '/home/*/Workspace/Work/Nielsen/Projects/dmxs/lib' \
        --exclude '/home/*/Workspace/Work/Nielsen/Projects/dmxs/pkg' \
        --exclude '/home/*/Workspace/Work/Nielsen/Projects/dmxs/models/generated' \
        --exclude '/home/*/Workspace/Work/Nielsen/Projects/dmxs/models/test' \
        --exclude '/home/*/Workspace/Work/Omicron/Projects/nntp/dev/build' \
        --exclude '/home/*/Workspace/Work/Omicron/Projects/nntp/fuzz/build' \
        --exclude '/home/*/Workspace/Work/Omicron/Projects/nntp/main/build' \
        --exclude '/home/*/Workspace/Work/Omicron/Projects/nntp/review/build' \
        --exclude '/home/*/Workspace/Work/Omicron/Projects/nntp/scratch/build' \
        --exclude '/home/*/Workspace/Private/Projects/cpp/**/bin/' \
        --exclude '/home/*/Workspace/Private/Projects/cpp/**/build/' \
        --exclude 're:/*var/cache/' \
        --exclude 're:/*vendor*/' \
        --exclude 're:/*target*/' \
        --exclude 're:/*node_modules*/' \
        ::"$USER"_'{now}' \
        /home/"$USER"/.config/BraveSoftware \
        /home/"$USER"/Desktop \
        /home/"$USER"/Documents \
        /home/"$USER"/Downloads \
        /home/"$USER"/Music \
        /home/"$USER"/Pictures \
        /home/"$USER"/Templates \
        /home/"$USER"/Videos \
        /home/"$USER"/Workspace
    backup_exit=$?

    info "Pruning repository"

    # Use the `prune` subcommand to maintain 1 daily, 2 weekly and 2 monthly archives of THIS machine. The '{hostname}_' prefix is
    # very important to limit prune's operation to this machine's archives and not apply to other machines' archives also
    borg prune \
        --list \
        --show-rc \
        --glob-archives "$USER"_* \
        --keep-daily 1 \
        --keep-weekly 2 \
        --keep-monthly 3
    prune_exit=$?

    info "Compacting repository"

    # actually free repo disk space by compacting segments
    borg compact --show-rc
    compact_exit=$?

    # use highest exit code as global exit code
    global_exit=$((backup_exit > prune_exit ? backup_exit : prune_exit))
    global_exit=$((compact_exit > global_exit ? compact_exit : global_exit))

    if [ ${global_exit} -eq 0 ]; then
        info "Backup, Prune, and Compact finished successfully"
    elif [ ${global_exit} -eq 1 ]; then
        info "Backup, Prune, and/or Compact finished with warnings"
    else
        info "Backup, Prune, and/or Compact finished with errors"
    fi

    echo "$global_exit"
}

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    init)
        [ "$nargs" -gt 1 ] && usage 64
        borg init --encryption=repokey || rc=$?
        ;;
    list)
        [ "$nargs" -gt 1 ] && usage 64
        borg list || rc=$?
        ;;
    check)
        [ "$nargs" -gt 1 ] && usage 64
        borg check -v || rc=$?
        ;;
    info)
        [ "$nargs" -gt 2 ] && usage 64
        borg info ::"$1" || rc=$?
        ;;
    create)
        [ "$nargs" -gt 1 ] && usage 64
        ssh_backup=$(do_ssh_backup)
        borg_backup=$(do_borg_backup)
        rc=$((ssh_backup > borg_backup ? ssh_backup : borg_backup))
        ;;
    delete)
        [ "$nargs" -gt 2 ] && usage 64
        borg delete -s -p ::"$1" || rc=$?
        ;;
    extract)
        [ "$nargs" -lt 2 ] && usage 64
        borg extract -p ::"$1" || rc=$?
        ;;
    mount)
        [ "$nargs" -lt 2 ] && usage 64
        if mountpoint -q -- /tmp/borg; then
            borg umount /tmp/borg || rc=$?
        fi
        [[ $rc = 0 ]] && mkdir -p /tmp/borg && borg mount -p ::"$1" /tmp/borg || rc=$?
        [[ $rc = 0 ]] && echo "Borg backup $1 mounted to /tmp/borg, remember to umount when done."
        ;;
    umount)
        [ "$nargs" -gt 1 ] && usage 64
        if mountpoint -q -- /tmp/borg; then
            borg umount /tmp/borg || rc=$?
            [[ $rc = 0 ]] && echo "Borg backup mounted to /tmp/borg has been umounted."
        fi
        ;;
    borg)
        [ "$nargs" -lt 2 ] && usage 64
        borg "$@" || rc=$?
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 64
        ;;
esac
echo "Done with rc=$rc" && exit "$rc"
