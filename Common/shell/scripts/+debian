#!/usr/bin/env bash

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    $0 install:"
    echo "        Install Debian System"
    echo "    $0 update:"
    echo "        Update Debian System"
    echo "    $0 apt [arbitrary APT command]:"
    echo "        Run arbitrary APT command"
    echo
    echo " e.g: $0 apt full-upgrade"
    exit "$1"
}

debian_install() {
    HEIGHT=25
    WIDTH=100
    CHOICE_HEIGHT=4
    BACKTITLE="Debian Setup Util"
    TITLE="Please Make a selection"
    MENU="Please Choose one of the following options:"

    # Check to see if Dialog is installed, if not install it
    if ! hash dialog 2>/dev/null; then
        sudo apt install -y dialog
    fi

    # Check to see if libnotify is installed, if not install it
    if ! hash notify-send 2>/dev/null; then
        sudo apt install -y libnotify-bin libnotify-dev
    fi

    OPTIONS=(
        1 "Set Defaults - Set some defaults (hostname, folders structure, gsettings, etc)"
        2 "Setup secrets - Setup both ssh and gpg from backups"
        3 "Install Emacs - Install emac28 from source"
        4 "Install Keyd - Install Keyd from source"
        5 "Quit"
    )

    while true; do
        CHOICE=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "$TITLE" \
            --nocancel \
            --menu "$MENU" \
            $HEIGHT $WIDTH $CHOICE_HEIGHT \
            "${OPTIONS[@]}" \
            2>&1 >/dev/tty)

        clear
        case $CHOICE in
            1)
                echo "1) Setting Defaults"
                # hostname
                read -r -p "Enter pretty hostname (defaults to '$(hostnamectl --pretty)'): " HOSTNAME_PRETTY
                [ -z "$HOSTNAME_PRETTY" ] && HOSTNAME_PRETTY="Julio's Personal Laptop"
                sudo hostnamectl set-hostname --pretty "$HOSTNAME_PRETTY"

                read -r -p "Enter static hostname (defaults to '$(hostnamectl --static)'): " HOSTNAME_STATIC
                [ -z "$HOSTNAME_STATIC" ] && HOSTNAME_STATIC="fedora-xps-9710"
                sudo hostnamectl set-hostname --static "$HOSTNAME_STATIC"

                # xdg
                export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
                export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
                export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
                export XDG_LIB_HOME="${XDG_DATA_HOME:-$HOME/.local/lib}"
                export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
                mkdir -p \
                    "${XDG_CACHE_HOME}" \
                    "${XDG_CONFIG_HOME}" \
                    "${XDG_DATA_HOME}" \
                    "${XDG_LIB_HOME}" \
                    "${XDG_STATE_HOME}"

                # Folder structure
                mkdir -p "$HOME/Workspace"
                mkdir -p "$HOME/Workspace/Books"
                mkdir -p "$HOME/Workspace/Private/Projects"
                mkdir -p "$HOME/Workspace/Public"
                mkdir -p "$HOME/Workspace/Software"
                mkdir -p "$HOME/Workspace/Stuff"
                mkdir -p "$HOME/Workspace/Work"
                mkdir -p "$HOME/Workspace/Work/Projects"
                mkdir -p "$HOME/Workspace/Work/Software"
                mkdir -p "$HOME/Workspace/Work/Stuff"

                # View current settings - gsettings list-recursively org.gnome.desktop.interface
                # Clock Settings
                gsettings set org.gnome.desktop.interface clock-format '24h'
                gsettings set org.gnome.desktop.interface clock-show-date true
                gsettings set org.gnome.desktop.interface clock-show-seconds false
                gsettings set org.gnome.desktop.interface clock-show-weekday false

                # No hot corners
                gsettings set org.gnome.desktop.interface enable-hot-corners false

                # Emacs please
                gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'

                # Show battery
                gsettings set org.gnome.desktop.interface show-battery-percentage true

                # Enable window buttons
                gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,maximize,close"

                # Set new windows centered
                gsettings set org.gnome.mutter center-new-windows true

                notify-send "1) Defaults has been set" --expire-time=20
                ;;
            2)
                echo "2) Setting up secrets"
                read -r -p "Enter keys backup directory: " KEYS_DIR
                KEYS_DIR=${KEYS_DIR%/}
                [ ! -d "$KEYS_DIR" ] && notify-send "$KEYS_DIR is not a directory" --expire-time=20 && continue
                [ ! -f "+crypt" ] && notify-send "$(pwd)/+crypt script does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/ssh.tar.gz.gpg" ] && notify-send "$KEYS_DIR/ssh.tar.gz.gpg does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/gpg.tar.gz.gpg" ] && notify-send "$KEYS_DIR/gpg.tar.gz.gpg does not exists" --expire-time=20 && continue

                echo ">> Setting up ssh keys from $KEYS_DIR/ssh.tar.gz.gpg"
                "./+crypt" -d "$KEYS_DIR/ssh.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/ssh ] && notify-send "Decryption failed, $KEYS_DIR/ssh does not exists" --expire-time=20 && continue
                mkdir -p ~/.ssh && rm -rf ~/.ssh/*
                cp "$KEYS_DIR"/ssh/id_* ~/.ssh
                cp "$KEYS_DIR"/ssh/config ~/.ssh
                chmod 700 ~/.ssh
                chmod 644 ~/.ssh/config
                chmod 600 ~/.ssh/id_*
                chmod 644 ~/.ssh/id_*.pub
                rm -rf "$KEYS_DIR"/ssh

                echo ">> Setting up gpg keys from $KEYS_DIR/gpg.tar.gz.gpg"
                "./+crypt" -d "$KEYS_DIR/gpg.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/gpg ] && notify-send "Decryption failed, $KEYS_DIR/gpg does not exists" --expire-time=20 && continue
                mkdir -p ~/.gnupg && rm -rf ~/.gnupg/*
                cp "$KEYS_DIR"/gpg/coonfig/*.conf ~/.gnupg
                gpg --import "$KEYS_DIR"/gpg/new_keys/0xB3F739419D91C7F3-2022-09-28.pub.asc
                rm -rf "$KEYS_DIR"/gpg

                echo "Editing gpg key 0xB3F..., you should trust ultimately (Option 5) and type 'quit'"
                gpg --edit-key 0xB3F739419D91C7F3

                # Remove keys
                rm -rf "$KEYS_DIR"

                # With the new keys we can go ahead and download some repos
                [ ! -d "$HOME/.password-store" ] && git clone git@github.com:jvillasante/pass.git "$HOME"/.password-store
                [ ! -d "$HOME"/Workspace/Public/dotfiles ] && git clone git@github.com:jvillasante/dotfiles.git "$HOME"/Workspace/Public/dotfiles
                [ ! -d "$HOME"/Workspace/Public/resume ] && git clone git@github.com:jvillasante/resume.git "$HOME"/Workspace/Public/resume

                notify-send "2) Secrets are set" --expire-time=20
                ;;
            3)
                echo "3) Installing Emacs"

                # Install needed dependencies
                sudo apt -y build-dep emacs
                sudo apt install -y libgccjit0 libgccjit-10-dev

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                [ ! -d "$HOME"/Workspace/Software/emacs ] && git clone git://git.sv.gnu.org/emacs.git "$HOME"/Workspace/Software/emacs
                cd "$HOME"/Workspace/Software/emacs || {
                    notify-send "Can't cd into $HOME/Workspace/Software/emacs" --expire-time=20
                    continue
                }
                git checkout emacs-28
                sudo make uninstall
                make clean
                make distclean
                git reset --hard HEAD # Remove all local changes to tracked files
                sudo git clean -dfx   # Remove all untracked files and directories
                git pull

                # Install
                ./autogen.sh
                ./configure --with-native-compilation --with-json --with-mailutils \
                    CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer" prefix=/usr/local
                make -j16
                sudo make install

                cd - || notify-send "Can't cd to previous directory" --expire-time=20
                notify-send "3) Emacs has been installed" --expire-time=20
                ;;
            4)
                echo "4) Installing Keyd"

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                [ ! -d "$HOME"/Workspace/Software/keyd ] && git clone git@github.com:rvaiya/keyd.git "$HOME"/Workspace/Software/keyd
                cd "$HOME"/Workspace/Software/keyd || {
                    notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=20
                    continue
                }
                sudo make uninstall
                make clean
                git reset --hard HEAD # Remove all local changes to tracked files
                sudo git clean -dfx   # Remove all untracked files and directories
                git pull

                # Install
                make -j16
                sudo make install

                # Copy Configuration
                sudo cp "$HOME"/Workspace/Public/dotfiles/Common/keyd/default.conf /etc/keyd/default.conf

                # Enable the daemon
                sudo systemctl enable keyd && sudo systemctl start keyd
                sudo keyd reload

                cd - || notify-send "Can't cd to previous directory" --expire-time=20
                notify-send "4) Keyd daemon has been installed" --expire-time=20
                ;;
            5)
                exit 0
                ;;
        esac
    done
}

debian_update() {
    sudo apt update -y
    test $? -eq 0 || usage 1

    sudo apt upgrade -y
    test $? -eq 0 || usage 1

    sudo apt full-upgrade -y
    test $? -eq 0 || usage 1

    sudo apt autoremove -y
    test $? -eq 0 || usage 1

    flatpak update -y
    test $? -eq 0 || usage 1

}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

if [ ! -f /etc/debian_version ]; then
    echo "Error: Debian is not running on this system, exiting..."
    exit 1
fi

if ! hash apt 2>/dev/null; then
    echo "Error: apt not installed on this system, exiting..."
    exit 1
fi

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    install)
        [ "$nargs" -eq 1 ] || usage 1
        debian_install "$@"
        ;;
    update)
        [ "$nargs" -eq 1 ] || usage 1
        debian_update "$@"
        ;;
    apt)
        [ "$nargs" -lt 2 ] && usage 1
        apt "$@"
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
