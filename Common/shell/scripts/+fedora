#!/usr/bin/env bash

usage() {
    echo "Usage:"
    echo "    $0 help:"
    echo "        Show this help message"
    echo "    sudo $0 install:"
    echo "        Install Fedora System (needs sudo)"
    echo "    $0 update:"
    echo "        Update Fedora System"
    echo "    $0 dnf [arbitrary DNF command]:"
    echo "        Run arbitrary DNF command"
    echo
    echo " e.g: $0 dnf check-update"
    exit "$1"
}

# thanks to ixz in #bash on irc.freenode.net
chc() {
    gawk -v OFS== -v FS== -e 'BEGIN { ARGC = 1 } $1 == ARGV[2] { print ARGV[4] ? ARGV[4] : $1, ARGV[3]; next } 1' "$@" <"$1" >"$1.1"
    test $? -eq 0 || return 1

    mv "$1"{.1,}
    test $? -eq 0 || return 1
}

# Usage: config_set filename key value
config_set() {
    local file key val
    file="$1"
    key="$2"
    val="$3"

    # check file exists
    [ ! -f "$file" ] && return 1

    # create key if not exists
    if ! grep -q "^${key}=" "${file}"; then
        # insert a newline just in case the file does not end with one
        printf "\n%s=" "${key}" >>"${file}"
    fi

    chc "$file" "$key" "$val"
    return $?
}

fedora_install() {
    HEIGHT=25
    WIDTH=100
    CHOICE_HEIGHT=4
    BACKTITLE="Fedora Setup Util"
    TITLE="Please Make a selection"
    MENU="Please Choose one of the following options:"

    # Check if we are root
    if ! [ "$(id -u)" = 0 ]; then
        echo "The install command needs to run as root." >&2
        usage 1
    fi

    # Check to see if Dialog is installed, if not install it
    if [ "$(rpm -q dialog 2>/dev/null | grep -c "is not installed")" -eq 1 ]; then
        dnf install -y dialog
    fi

    # Check to see if libnotify is installed, if not install it
    if [ "$(rpm -q libnotify 2>/dev/null | grep -c "is not installed")" -eq 1 ]; then
        dnf install -y libnotify
    fi

    OPTIONS=(
        1 "Set Defaults - Set some defaults (hostname, folders structure, gsettings, etc)"
        2 "Setting DNF - Setup DNF and do a full upgrade of the System"
        3 "Enable RPM Fusion - Enables the RPM Fusion repos for your specific version"
        4 "Update Kernel & Firmware and Firmware update (reboot needed)"
        5 "Install NVIDIA - Install NVIDIA Drivers (reboot needed)"
        6 "Install Software - Installs a bunch of my most used software"
        7 "Install Extras - Themes Fonts and Codecs"
        8 "Enable Flatpak - Enables the Flatpak repo and installs packages"
        9 "Install Docker - Install docker"
        10 "Install Nix - The Nix package manager"
        11 "Setup Secrets and Repos - Setup ssh and gpg from backups and get git repos"
        12 "Install Emacs - Install Emacs"
        13 "Install Keyd - Install Keyd from source"
        14 "Quit")

    while true; do
        CHOICE=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "$TITLE" \
            --nocancel \
            --menu "$MENU" \
            $HEIGHT $WIDTH $CHOICE_HEIGHT \
            "${OPTIONS[@]}" \
            2>&1 >/dev/tty)

        clear
        case $CHOICE in
            1)
                echo "1) Setting Defaults"

                # hostname
                read -r -p "Enter pretty hostname (defaults to 'Julio's Personal Laptop'): " HOSTNAME_PRETTY
                [ -z "$HOSTNAME_PRETTY" ] && HOSTNAME_PRETTY="Julio's Personal Laptop"
                hostnamectl set-hostname --pretty "$HOSTNAME_PRETTY"

                read -r -p "Enter static hostname (defaults to 'fedora-xps-9710'): " HOSTNAME_STATIC
                [ -z "$HOSTNAME_STATIC" ] && HOSTNAME_STATIC="fedora-xps-9710"
                hostnamectl set-hostname --static "$HOSTNAME_STATIC"

                # xdg
                export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
                export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
                export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
                export XDG_LIB_HOME="${XDG_DATA_HOME:-$HOME/.local/lib}"
                export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
                mkdir -p \
                    "${XDG_CACHE_HOME}" \
                    "${XDG_CONFIG_HOME}" \
                    "${XDG_DATA_HOME}" \
                    "${XDG_LIB_HOME}" \
                    "${XDG_STATE_HOME}"

                # Folder structure
                mkdir -p "$HOME/Workspace"
                mkdir -p "$HOME/Workspace/Books"
                mkdir -p "$HOME/Workspace/Private/Projects"
                mkdir -p "$HOME/Workspace/Public"
                mkdir -p "$HOME/Workspace/Software"
                mkdir -p "$HOME/Workspace/Stuff"
                mkdir -p "$HOME/Workspace/Work"
                mkdir -p "$HOME/Workspace/Work/Projects"
                mkdir -p "$HOME/Workspace/Work/Software"
                mkdir -p "$HOME/Workspace/Work/Stuff"

                # Gsettings - dconf-editor
                #  - View current settings - gsettings list-recursively org.gnome.desktop.interface
                #  - Reset to default setting - gsettings reset org.gnome.desktop.interface enable-animations

                # Clock Settings
                gsettings set org.gnome.desktop.interface clock-format '12h'
                gsettings set org.gnome.desktop.interface clock-show-date true
                gsettings set org.gnome.desktop.interface clock-show-seconds false
                gsettings set org.gnome.desktop.interface clock-show-weekday false

                # No hot corners
                gsettings set org.gnome.desktop.interface enable-hot-corners false

                # Emacs please
                gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'

                # Show battery
                gsettings set org.gnome.desktop.interface show-battery-percentage true

                # Enable window buttons
                gsettings set org.gnome.desktop.wm.preferences button-layout ':minimize,maximize,close'

                # Set new windows centered
                gsettings set org.gnome.mutter center-new-windows true

                # Set list-view for Nautilius
                gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'

                read -p "1) Defaults has been set. Press enter to continue..."
                ;;
            2)
                echo "2) Setting up DNF"
                echo 'fastestmirror=true' | tee -a /etc/dnf/dnf.conf
                echo 'max_parallel_downloads=10' | tee -a /etc/dnf/dnf.conf

                dnf upgrade --refresh
                dnf check
                dnf autoremove
                read -p "2) DNF config has now been amended. Press enter to continue..."
                ;;
            3)
                echo "3) Enabling RPM Fusion"
                dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-"$(rpm -E %fedora)".noarch.rpm \
                    https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-"$(rpm -E %fedora)".noarch.rpm
                dnf upgrade --refresh
                dnf -y groupupdate core
                dnf install -y rpmfusion-free-release-tainted
                dnf install -y rpmfusion-nonfree-release-tainted
                dnf install -y dnf-plugins-core
                dnf install -y \*-firmware

                dnf upgrade --refresh
                dnf check
                dnf autoremove
                read -p "3) RPM Fusion has been enabled. Press enter to continue..."
                ;;
            4)
                echo "4) Updating Keyrnel and Firmware"
                dnf install -y gcc kernel-headers kernel-devel
                fwupdmgr get-devices
                fwupdmgr refresh --force
                fwupdmgr get-updates
                fwupdmgr update

                dnf upgrade --refresh
                dnf check
                dnf autoremove

                read -p "4) Latest Firmware installed, we need to reboot to finalize driver installation. Press enter to continue..."
                ;;
            5)
                echo "5) Installing NVIDIA Drivers. We need to disable secure boot on the bios for NVIDIA Drivers to be loaded."

                # Using RPM Fusion
                dnf install -y akmod-nvidia
                dnf install -y xorg-x11-drv-nvidia xorg-x11-drv-nvidia-libs
                dnf install -y xorg-x11-drv-nvidia-cuda xorg-x11-drv-nvidia-cuda-libs
                dnf install -y vdpauinfo libva-vdpau-driver libva-utils
                dnf install -y vulkan vulkan-tools
                dnf install -y xorg-x11-drv-nvidia-power
                systemctl enable nvidia-{suspend,resume,hibernate}

                dnf upgrade --refresh
                dnf check
                dnf autoremove
                read -p "5) NVIDIA Drivers installed, we need to reboot to finalize driver installation. Press enter to continue..."
                ;;
            6)
                echo "6) Installing Software"
                # general
                dnf install -y dnf-plugins-core copr-cli
                dnf groupinstall -y "Development Tools" "Development Libraries"
                dnf install -y git ripgrep fd-find xclip util-linux-user xprop xwininfo htop btop
                dnf install -y aspell aspell-en aspell-es autojump atool autoconf automake bat cmake vim
                dnf install -y freetype-devel fontconfig-devel libxcb-devel libxkbcommon-devel
                dnf install -y curl dconf-editor dnsutils dos2unix doxygen msmtp neofetch
                dnf install -y graphviz htop mercurial exa ninja-build pass
                dnf install -y nodejs npm python3 python3-pip pandoc poppler-utils poppler-data
                dnf install -y subversion tldr tree w3m wget libtool ranger texinfo
                dnf install -y wordnet shfmt editorconfig glslang ShellCheck xdotool parallel
                dnf install -y llvm clang clang-tools-extra libpcap libpcap-devel
                dnf install -y pkg-config openssl openssl-devel flex bison unar unrar unzip p7zip p7zip-plugins
                dnf install -y ImageMagick ImageMagick-devel sqlite
                dnf install -y valgrind minicom mc strace tidy

                # Wayland stuff
                dnf install -y egl-wayland egl-wayland-devel wl-clipboard

                # tmux: A terminal multiplexer
                dnf install -y tmux

                # zellij: A terminal workspace with batteries included (like tmux)
                # dnf copr enable varlad/zellij
                # dnf install zellij

                # Alacritty
                dnf install -y alacritty

                # Starship Prompt
                curl -sS https://starship.rs/install.sh | sh

                # gpg
                dnf install -y gpg gnupg2 gnupg-pkcs11-scd pcsc-tools opensc pcsc-lite-ccid
                systemctl enable pcscd
                systemctl start pcscd
                systemctl restart pcscd

                # yubikey
                dnf install -y yubikey-manager

                # mail
                dnf install -y isync mu maildir-utils

                # ncdu (text-based disk usage viewer)
                dnf install -y ncdu

                # Borg Backup
                dnf install -y borgbackup

                # Command Line Fuzzy Finder
                # dnf install -y skim
                dnf install -y fzf

                # Gnome Software
                dnf -y install gnome-tweaks

                # Neovim nightly
                dnf copr enable agriffis/neovim-nightly -y
                dnf install -y neovim python3-neovim

                # Firewall GUI to manage firewalld
                dnf install -y firewall-config

                # Profile sync daemon
                dnf install -y profile-sync-daemon
                cp /usr/share/psd/contrib/brave /usr/share/psd/browsers
                systemctl --user enable psd.service
                systemctl --user start psd.service
                systemctl --user restart psd.service

                # Go
                # dnf install go

                # non dnf software
                pip install cmake-language-server
                npm install --global npm@latest
                npm install --global prettier
                npm install --global js-beautify
                npm install --global typescript-language-server typescript
                npm install --global dockerfile-language-server-nodejs
                npm install --global bash-language-server

                dnf upgrade --refresh
                dnf check
                dnf autoremove
                read -p "6) Software has been installed. Press enter to continue..."
                ;;
            7)
                echo "7) Installing Extras"

                # Multimedia
                dnf groupupdate -y sound-and-video
                dnf install -y libdvdcss
                dnf install -y gstreamer1-plugins-{bad-\*,good-\*,ugly-\*,base} \
                    gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel ffmpeg gstreamer-ffmpeg
                dnf install -y lame\* --exclude=lame-devel
                dnf config-manager --set-enabled fedora-cisco-openh264
                dnf install -y gstreamer1-plugin-openh264 mozilla-openh264
                dnf group upgrade -y --with-optional Multimedia

                # TLP
                # Install TLP and remove power profiles
                dnf remove -y power-profiles-daemon
                dnf install -y tlp tlp-rdw

                # Create TLP config
                mkdir -p /etc/tlp.d
                cp /etc/tlp.conf /etc/tlp.d/01-myconfig.conf
                vim /etc/tlp.d/01-myconfig.conf

                # Set TLP config values
                config_set /etc/tlp.d/01-myconfig.conf USB_AUTOSUSPEND 0
                config_set /etc/tlp.d/01-myconfig.conf TLP_DEFAULT_MODE BAT
                config_set /etc/tlp.d/01-myconfig.conf TLP_PERSISTENT_DEFAULT 1

                # Enable TLP service
                systemctl enable tlp.service
                systemctl mask systemd-rfkill.service systemd-rfkill.socket

                # Fonts
                dnf -y copr enable peterwu/iosevka
                dnf -y copr enable dawid/better_fonts
                dnf update -y
                dnf install -y --skip-broken fontconfig-font-replacements
                dnf install -y --skip-broken fontconfig-enhanced-defaults
                dnf install -y libreoffice-opensymbol-fonts
                dnf install -y adobe-source-code-pro-fonts
                dnf install -y jetbrains-mono-fonts-all
                dnf install -y ibm-plex-mono-fonts ibm-plex-sans-fonts ibm-plex-serif-fonts
                dnf install -y iosevka-fonts iosevka-fixed-fonts iosevka-term-fonts iosevka-slab-fonts iosevka-aile-fonts
                dnf install -y terminus-fonts terminus-fonts-console google-noto-fonts-common mscore-fonts-all
                dnf install -y fira-code-fonts 'mozilla-fira*' 'google-roboto*'

                # Gnome Font Settings
                gsettings set org.gnome.desktop.interface monospace-font-name 'Iosevka Term 16'

                # Latex
                dnf install -y texlive-scheme-full

                dnf upgrade --refresh
                dnf check
                dnf autoremove
                read -p "7) Multimedia, TLP, fonts and others has been installed. Press enter to continue..."
                ;;
            8)
                echo "8) Enabling Flatpak"
                flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
                flatpak update
                flatpak install -y flathub org.gnome.Extensions
                flatpak install -y flathub org.gnome.Firmware
                flatpak install -y flathub com.dropbox.Client
                flatpak install -y flathub com.discordapp.Discord
                flatpak install -y flathub com.skype.Client
                flatpak install -y flathub com.slack.Slack
                flatpak install -y flathub org.telegram.desktop
                flatpak install -y flathub org.videolan.VLC
                flatpak install -y flathub com.transmissionbt.Transmission
                flatpak install -y flathub org.gimp.GIMP
                flatpak install -y flathub org.wireshark.Wireshark
                flatpak install -y flathub com.github.tchx84.Flatseal
                flatpak install -y flathub org.shotcut.Shotcut
                # flatpak install -y flathub com.brave.Browser
                # flatpak install -y flathub io.github.mimbrero.WhatsAppDesktop
                # flatpak install -y flathub org.signal.Signal
                # flatpak install -y flathub com.microsoft.Edge
                # flatpak install -y flathub com.visualstudio.code
                # flatpak install -y flathub com.github.GradienceTeam.Gradience

                read -p "8) Flatpak has now been enabled. Press enter to continue..."
                ;;
            9)
                echo "9) Installing Docker"
                dnf install -y dnf-plugins-core
                dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
                dnf install -y docker-ce docker-ce-cli containerd.io

                systemctl enable docker
                systemctl start docker
                docker run hello-world

                dnf upgrade --refresh
                dnf check
                dnf autoremove
                read -p "9) Docker has been installed. Press enter to continue..."
                ;;
            10)
                if [ "$(getenforce 2>/dev/null | grep -c "Enforcing")" -eq 1 ]; then
                    notify-send "10) I won't install Nix" "It does not work with SELinux" --expire-time=20
                    continue
                fi

                # Install nix
                if ! hash nix 2>/dev/null; then
                    echo "install: setting up nix..."
                    sh <(curl -L https://nixos.org/nix/install) --daemon

                    # Set current user as trusted user
                    echo "trusted-users = root ${USER}" | tee -a /etc/nix/nix.conf && pkill nix-daemon

                    source "$HOME/.bashrc"

                    nix-channel --add https://nixos.org/channels/nixpkgs-unstable
                fi

                nix-channel --update

                # Install cachix (https://www.cachix.org/)
                if ! hash cachix 2>/dev/null; then
                    echo "install: setting up cachix..."

                    # Check to see if curl is installed, if not install it
                    if [ "$(rpm -q curl 2>/dev/null | grep -c "is not installed")" -eq 1 ]; then
                        dnf install -y curl
                    fi

                    nix-env -iA cachix -f https://cachix.org/api/v1/install
                fi

                # Using `https://devenv.sh/` alternative would be `https://github.com/nix-community/nix-direnv`
                # Install devenv
                if ! hash devenv 2>/dev/null; then
                    nix-env -if https://github.com/cachix/devenv/tarball/latest
                fi

                read -p "10) Nix has been installed. Press enter to continue..."
                ;;
            11)
                echo "11) Setting up secrets and repos"
                read -r -p "Enter keys backup directory: " KEYS_DIR
                KEYS_DIR=${KEYS_DIR%/}
                [ ! -d "$KEYS_DIR" ] && notify-send "$KEYS_DIR is not a directory" --expire-time=20 && continue
                [ ! -f "+crypt" ] && notify-send "$(pwd)/+crypt script does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/ssh.tar.gz.gpg" ] && notify-send "$KEYS_DIR/ssh.tar.gz.gpg does not exists" --expire-time=20 && continue
                [ ! -f "$KEYS_DIR/gpg.tar.gz.gpg" ] && notify-send "$KEYS_DIR/gpg.tar.gz.gpg does not exists" --expire-time=20 && continue

                echo ">> Setting up ssh keys from $KEYS_DIR/ssh.tar.gz.gpg"
                "./+crypt" -d "$KEYS_DIR/ssh.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/ssh ] && notify-send "Decryption failed, $KEYS_DIR/ssh does not exists" --expire-time=20 && continue
                mkdir -p ~/.ssh && rm -rf ~/.ssh/*
                cp "$KEYS_DIR"/ssh/id_* ~/.ssh
                cp "$KEYS_DIR"/ssh/config ~/.ssh
                chmod 700 ~/.ssh
                chmod 644 ~/.ssh/config
                chmod 600 ~/.ssh/id_*
                chmod 644 ~/.ssh/id_*.pub
                rm -rf "$KEYS_DIR"/ssh

                echo ">> Setting up gpg keys from $KEYS_DIR/gpg.tar.gz.gpg"
                "./+crypt" -d "$KEYS_DIR/gpg.tar.gz.gpg"
                [ ! -d "$KEYS_DIR"/gpg ] && notify-send "Decryption failed, $KEYS_DIR/gpg does not exists" --expire-time=20 && continue
                mkdir -p ~/.gnupg && rm -rf ~/.gnupg/*
                cp "$KEYS_DIR"/gpg/config/*.conf ~/.gnupg
                gpg --import "$KEYS_DIR"/gpg/new_keys/0xB3F739419D91C7F3-2022-09-28.pub.asc
                rm -rf "$KEYS_DIR"/gpg

                echo "Editing gpg key 0xB3F..., you should trust ultimately (Option 5) and type 'quit'"
                gpg --edit-key 0xB3F739419D91C7F3

                # Remove keys
                rm -rf "$KEYS_DIR"

                # With the new keys we can go ahead and download some repos
                [ ! -d "$HOME/.password-store" ] && git clone git@github.com:jvillasante/pass.git "$HOME"/.password-store
                [ ! -d "$HOME"/Workspace/Public/dotfiles ] && git clone git@github.com:jvillasante/dotfiles.git "$HOME"/Workspace/Public/dotfiles
                [ ! -d "$HOME"/Workspace/Public/resume ] && git clone git@github.com:jvillasante/resume.git "$HOME"/Workspace/Public/resume

                read -p "11) Secrets and repos are set. Press enter to continue..."
                ;;
            12)
                echo "12) Installing Emacs"

                # Is it already installed?
                hash emacs 2>/dev/null && notify-send "12) Emacs is already installed" --expire-time=20 && continue

                # Using corp
                dnf copr enable deathwish/emacs-pgtk-nativecomp
                dnf update -y
                dnf install -y emacs

                read -p "12) Emacs has been installed. Press enter to continue..."
                ;;
            13)
                echo "13) Installing Keyd"

                # Prepare git repo
                [ ! -d "$HOME"/Workspace/Software ] && mkdir -p "$HOME"/Workspace/Software
                [ ! -d "$HOME"/Workspace/Software/keyd ] && git clone git@github.com:rvaiya/keyd.git "$HOME"/Workspace/Software/keyd
                cd "$HOME"/Workspace/Software/keyd || {
                    notify-send "Can't cd into $HOME/Workspace/Software/keyd" --expire-time=20
                    continue
                }
                make uninstall
                make clean
                git reset --hard HEAD # Remove all local changes to tracked files
                git clean -dfx        # Remove all untracked files and directories
                git pull

                # Install
                make -j16
                make install

                # Copy Configuration
                cp "$HOME"/Workspace/Public/dotfiles/Common/keyd/default.conf /etc/keyd/default.conf

                # Enable the daemon
                systemctl enable keyd && systemctl start keyd
                keyd reload

                cd - || notify-send "Can't cd to previous directory" --expire-time=20
                read -p "13) Keyd daemon has been installed. Press enter to continue..."
                ;;
            14)
                exit 0
                ;;
        esac
    done
}

fedora_update() {
    sudo dnf -y upgrade --refresh
    test $? -eq 0 || usage 1

    sudo dnf -y distro-sync
    test $? -eq 0 || usage 1

    sudo dnf -y autoremove
    test $? -eq 0 || usage 1

    flatpak update -y
    test $? -eq 0 || usage 1
}

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE-0}" == "1" ]] && set -o xtrace
cd "$(dirname "$0")" || exit 1

if [ ! -f /etc/fedora-release ]; then
    echo "Error: Fedora is not running on this system, exiting..."
    exit 1
fi

if ! hash dnf 2>/dev/null; then
    echo "Error: dnf not installed on this system, exiting..."
    exit 1
fi

nargs=$#
cmd=${1-}
rc=0
if [ "$#" -gt 0 ]; then shift; fi
case $cmd in
    install)
        [ "$nargs" -eq 1 ] || usage 1
        fedora_install "$@"
        ;;
    update)
        [ "$nargs" -eq 1 ] || usage 1
        fedora_update "$@"
        ;;
    dnf)
        [ "$nargs" -lt 2 ] && usage 1
        dnf "$@"
        ;;
    help | --help | -h)
        usage 0
        ;;
    *)
        usage 1
        ;;
esac
exit $rc
