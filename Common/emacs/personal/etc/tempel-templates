text-mode

(update "Update " p ".html")

org-mode

(development-version "[Part of {{{development-version}}}]")

emacs-lisp-mode

(autoload ";;;###autoload")
(lambda "(lambda (" p ")" n> r> ")")
(defvar "(defvar " p "\n  \"" p "\")")
(defvar-local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(defface "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(defgroup "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(defmacro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(defalias "(defalias '" p " '" p ")")
(defun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(defcustom "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(if-let "(if-let (" p ")" n> r> ")")
(when-let "(when-let (" p ")" n> r> ")")
(if-let* "(if-let* (" p ")" n> r> ")")
(when-let* "(when-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " p n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")

js-mode

(if "if (" p ") {" n> p n "}")
(elseif "if (" p ") {" n> p n "}")
(for "for (let " (p "iterator" iterator) " = 0; " iterator " < " (s var) "; " iterator "++) {" n> p n "}")
(function "function " (p "functionName") " (" p ") {" n> p n "}")
(switch "switch (" p ") {" n "case " p ":" n p n> "break;" n "default:" n> "break;")
(arrow "const " (p "identifier") " = (" p ") => {" n> p n "};")
(condensed "const " (p "identifier") " = " p " => " p ";")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
