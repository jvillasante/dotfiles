#!/bin/bash

#
# Backups and restore folders using `borg` command.
#

if ! type borg >/dev/null 2>&1; then
    echo "You need to install borg first, exiting..."
    exit 1
fi

. "$(dirname "$0")/../common.sh"

# derived information
export BORG_CACHE_DIR=/home/"$USER"/.cache/borg/

# Setting this, so the repo does not need to be given on the commandline:
# TODO: export BORG_REPO=ssh://username@example.com:2022/~/backup/main
export BORG_REPO=/run/media/"$USER"/Toshiba/borg/

# See the section "Passphrase notes" for more infos.
export BORG_PASSPHRASE=$(pass Apps/borgbackup)

function firefox_profile() {
    local PROFILE
    PROFILE=$(cat "$HOME/.mozilla/firefox/profiles.ini" | sed -n -e 's/^.*Default=//p' | head -n 1)
    if [[ ! "$PROFILE" =~ ^.*\.personal$ ]]; then
        PROFILE=""
    else
        PROFILE="${HOME}/.mozilla/firefox/$PROFILE"
    fi

    echo "$PROFILE"
}

function backup_home() {
    # some helpers and error handling:
    info() { printf "\n%s %s\n\n" "$(date)" "$*" >&2; }
    trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

    info "Starting backup"

    # Backup the most important directories into an archive named after
    # the machine this script is currently running on:
    borg create \
        --progress \
        --stats \
        --filter AME \
        --list \
        --show-rc \
        --compression lz4 \
        --exclude-caches \
        --exclude '/home/*/.*' \
        --exclude '/home/*/VirtualBox VMs*' \
        --exclude '/home/*/Virtualbox VMs*' \
        --exclude '/home/*/Dropbox' \
        --exclude '/home/*/Workspace/Public/' \
        --exclude 're:/vendor/' \
        --exclude 're:/node_modules/' \
        \
        ::'{hostname}_{now}' \
        /home/"$USER"/

    backup_exit=$?

    info "Pruning repository"

    # Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
    # archives of THIS machine. The '{hostname}_' prefix is very important to
    # limit prune's operation to this machine's archives and not apply to
    # other machines' archives also:

    borg prune \
        --list \
        --prefix '{hostname}_' \
        --show-rc \
        --keep-daily 7 \
        --keep-weekly 4 \
        --keep-monthly 6

    prune_exit=$?

    # actually free repo disk space by compacting segments

    # info "Compacting repository"
    # TODO: borg compact
    compact_exit=$?

    # use highest exit code as global exit code
    global_exit=$((backup_exit > prune_exit ? backup_exit : prune_exit))
    global_exit=$((compact_exit > global_exit ? compact_exit : global_exit))

    if [ ${global_exit} -eq 0 ]; then
        info "Backup, Prune, and Compact finished successfully"
    elif [ ${global_exit} -eq 1 ]; then
        info "Backup, Prune, and/or Compact finished with warnings"
    else
        info "Backup, Prune, and/or Compact finished with errors"
    fi
}

function backup_firefox() {
    # some helpers and error handling:
    info() { printf "\n%s %s\n\n" "$(date)" "$*" >&2; }
    trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

    if pgrep -x firefox >/dev/null; then
        info "Firefox is running. Close it and try again..."
        exit 1
    fi

    info "Restarting psd.service to create a new browser backups..."
    systemctl --user restart psd.service
    sleep 1

    info "Starting backup"

    # Backup the most important directories into an archive named after
    # the machine this script is currently running on:

    borg create \
        --progress \
        --stats \
        --filter AME \
        --list \
        --show-rc \
        --compression lz4 \
        --exclude-caches \
        ::'mozilla-{hostname}_{now}' \
        /home/"$USER"/.mozilla

    backup_exit=$?

    info "Pruning repository"

    # Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
    # archives of THIS machine. The 'mozilla-{hostname}_' prefix is very important to
    # limit prune's operation to this machine's archives and not apply to
    # other machines' archives also:

    borg prune \
        --list \
        --prefix 'mozilla-' \
        --show-rc \
        --keep-daily 7 \
        --keep-weekly 4 \
        --keep-monthly 6

    prune_exit=$?

    # actually free repo disk space by compacting segments

    # info "Compacting repository"
    # TODO: borg compact
    compact_exit=$?

    # use highest exit code as global exit code
    global_exit=$((backup_exit > prune_exit ? backup_exit : prune_exit))
    global_exit=$((compact_exit > global_exit ? compact_exit : global_exit))

    if [ ${global_exit} -eq 0 ]; then
        info "Backup, Prune, and Compact finished successfully"
    elif [ ${global_exit} -eq 1 ]; then
        info "Backup, Prune, and/or Compact finished with warnings"
    else
        info "Backup, Prune, and/or Compact finished with errors"
    fi
}

function list_backups() {
    if ! type borg >/dev/null 2>&1; then
        echo "You need to install borg first, exiting..."
        exit 1
    fi

    borg list
    check $?
}

function check_backups() {
    if ! type borg >/dev/null 2>&1; then
        echo "You need to install borg first, exiting..."
        exit 1
    fi

    borg check -v
    check $?
}

# TODO: extract backup
# TODO: remove backup

while true; do
    PS3="Choose an option: "
    options=("List Backups" "Check Backups" "Backup Home" "Backup Firefox" "Quit")

    select opt in "${options[@]}"; do
        case $REPLY in
            1)
                list_backups
                hr
                break
                ;;
            2)
                check_backups
                hr
                break
                ;;
            3)
                backup_home
                hr
                break
                ;;
            4)
                backup_firefox
                hr
                break
                ;;
            5) break 2 ;;
            *) echo "Invalid option '$opt'" >&2 ;;
        esac
    done
done
exit 0

function init() {
    if [ -z "$1" ] || [ ! -d "$1" ]; then
        echo "Illegal arguments ($1 must exist and be a directory)"
        echo "  Usage: ./backup init <Home Folder>"
        echo "    e.g: ./backup init $HOME"
        exit 1
    fi

    if ask "Creating default folders on $1, continue?"; then
        echo "Creating default folders on $1..."
        mkdir -p "$1/Workspace/Software/clang"
        mkdir -p "$1/Workspace/Software/gcc"
        mkdir -p "$1/Workspace/Software/system"
        mkdir -p "$1/Workspace/Software/work"
        mkdir -p "$1/Workspace/Software/zig"
    else
        echo "Aborted by user..."
    fi
}

function backup() {
    if pgrep -x brave >/dev/null; then
        echo ">>> Brave Browser is running. Close it and try again..."
        exit 1
    fi

    if pgrep -x firefox >/dev/null; then
        echo ">>> Firefox is running. Close it and try again..."
        exit 1
    fi

    if [ -z "$1" ] || [ ! -d "$1" ]; then
        echo "Illegal arguments ($1 must exists and be a directory)"
        echo "  Usage: ./backup backup <Home Folder> <USB Folder>"
        echo "    e.g: ./backup backup $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [ -z "$2" ] || [ ! -d "$2" ]; then
        echo "Illegal arguments ($2 must exists and be a directory)"
        echo "  Usage: ./backup backup <Home Folder> <USB Folder>"
        echo "    e.g: ./backup backup $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [[ $1 == */ ]] && [[ $2 == */ ]]; then # * is used for pattern matching
        if ask "Backing up $1 to $2, continue?"; then
            echo "Restarting psd.service to create a new browser backups..."
            systemctl --user restart psd.service
            sleep 1

            echo "Backing up $1 to $2..."
            rsync -uazh --quiet --safe-links --delete \
                --include={'/.mozilla','/.mozilla/firefox','/.mozilla/firefox/installs.ini','/.mozilla/firefox/profiles.ini','/.mozilla/firefox/*.personal-backup/***'} \
                --include={'/.config','/.config/BraveSoftware','/.config/BraveSoftware/Brave-Browser-backup/***'} \
                --include={'/Desktop/***','/Documents/***','/Downloads/***','/Music/***','/Pictures/***','/Videos/***'} \
                --include={'/Workspace','/Workspace/Books/***','/Workspace/Private/***','/Workspace/Work/***'} \
                --include={'/Workspace/Public','/Workspace/Public/Projects/***'} \
                --exclude='*' "$1" "$2"
        else
            echo "Aborted by user..."
        fi
    else
        echo "Either $1 or $2 does not end with '/', exiting..."
    fi
}

function restore() {
    if pgrep -x brave >/dev/null; then
        echo ">>> Brave Browser is running. Close it and try again..."
        exit 1
    fi

    if pgrep -x firefox >/dev/null; then
        echo ">>> Firefox is running. Close it and try again..."
        exit 1
    fi

    if [ -z "$1" ] || [ ! -d "$1" ]; then
        echo "Illegal arguments ($1 must exists and be a directory)"
        echo "  Usage: ./backup restore <Home Folder> <USB Folder>"
        echo "    e.g: ./backup restore $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [ -z "$2" ] || [ ! -d "$2" ]; then
        echo "Illegal arguments ($2 must exists and be a directory)"
        echo "  Usage: ./backup restore <Home Folder> <USB Folder>"
        echo "    e.g: ./backup restore $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [[ $1 == */ ]] && [[ $2 == */ ]]; then # * is used for pattern matching
        if ask "Restoring $2 to $1, continue?"; then
            echo "Stopping psd.service to execute the restore..."
            systemctl --user stop psd.service
            sleep 1

            rm -rf "{HOME}/.mozilla"
            rm -rf "{HOME}/.config/BraveSoftware"

            echo "Restoring $2 to $1..."
            rsync -uazh --quiet "$2" "$1"

            echo "Restoring Firefox Browser backup..."
            local FIREFOX_PROFILE
            FIREFOX_PROFILE=$(firefox_profile)
            if [ -z "${FIREFOX_PROFILE}" ]; then
                echo ">>> Didn't found Firefox profile, skipping Firefox restore..."
            else
                if [ -d "${HOME}/.mozilla" ]; then
                    if [ -d "${HOME}/.mozilla/firefox" ]; then
                        mv "${HOME}/.mozilla/firefox/${FIREFOX_PROFILE}-backup" "${HOME}/.mozilla/firefox/${FIREFOX_PROFILE}"
                    fi
                fi
            fi

            echo "Restoring Brave Browser backup..."
            if [ -d "${HOME}/.config/BraveSoftware" ]; then
                if [ -d "${HOME}/.config/BraveSoftware/Brave-Browser" ]; then
                    rm -rf "{HOME}/.config/BraveSoftware/Brave-Browser"
                fi

                if [ -d "${HOME}/.config/BraveSoftware/Brave-Browser-backup" ]; then
                    mv "${HOME}/.config/BraveSoftware/Brave-Browser-backup" "${HOME}/.config/BraveSoftware/Brave-Browser"
                fi
            fi

            echo "Starting psd.service..."
            systemctl --user start psd.service
            sleep 1
        else
            echo "Aborted by user..."
        fi
    else
        echo "Either $1 or $2 does not end with '/', exiting..."
    fi
}

if [ "$#" -eq 0 ]; then
    echo "Illegal number of arguments (at least 1 expected)"
    echo "Usage: ./backup <init|backup|restore> ..."
    exit 1
fi

function process() {
    if [ "$1" = "init" ]; then
        init "$2"
    elif [ "$1" = "backup" ]; then
        backup "$2" "$3"
    elif [ "$1" = "restore" ]; then
        restore"$2" "$3"
    else
        echo "Illegal argument"
        echo "Usage: ./backup <init|backup|restore ..."
    fi
}

process "$1" "$2" "$3"
