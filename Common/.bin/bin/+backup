#!/bin/bash

#
# Backups and restore folders using `rsync` command.
# It also create some needed default folders.
#

. "$(dirname "$0")/../common.sh"

function firefox_profile() {
    local PROFILE
    PROFILE=$(cat "$HOME/.mozilla/firefox/profiles.ini" | sed -n -e 's/^.*Default=//p' | head -n 1)
    if [[ ! "$PROFILE" =~ ^.*\.personal$ ]]; then
        PROFILE=""
    else
        PROFILE="${HOME}/.mozilla/firefox/$PROFILE"
    fi

    echo "$PROFILE"
}

function init() {
    if [ -z "$1" ] || [ ! -d "$1" ]; then
        echo "Illegal arguments ($1 must exist and be a directory)"
        echo "  Usage: ./backup init <Home Folder>"
        echo "    e.g: ./backup init $HOME"
        exit 1
    fi

    if ask "Creating default folders on $1, continue?"; then
        echo "Creating default folders on $1..."
        mkdir -p "$1/Workspace/Software/clang"
        mkdir -p "$1/Workspace/Software/gcc"
        mkdir -p "$1/Workspace/Software/system"
        mkdir -p "$1/Workspace/Software/work"
        mkdir -p "$1/Workspace/Software/zig"
    else
        echo "Aborted by user..."
    fi
}

function backup() {
    if pgrep -x brave >/dev/null; then
        echo ">>> Brave Browser is running. Close it and try again..."
        exit 1
    fi

    if pgrep -x firefox >/dev/null; then
        echo ">>> Firefox is running. Close it and try again..."
        exit 1
    fi

    if [ -z "$1" ] || [ ! -d "$1" ]; then
        echo "Illegal arguments ($1 must exists and be a directory)"
        echo "  Usage: ./backup backup <Home Folder> <USB Folder>"
        echo "    e.g: ./backup backup $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [ -z "$2" ] || [ ! -d "$2" ]; then
        echo "Illegal arguments ($2 must exists and be a directory)"
        echo "  Usage: ./backup backup <Home Folder> <USB Folder>"
        echo "    e.g: ./backup backup $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [[ $1 == */ ]] && [[ $2 == */ ]]; then # * is used for pattern matching
        if ask "Backing up $1 to $2, continue?"; then
            echo "Restarting psd.service to create a new browser backups..."
            systemctl --user restart psd.service
            sleep 1

            echo "Backing up $1 to $2..."
            rsync -uazh --quiet --safe-links --delete \
                --include={'/.mozilla','/.mozilla/firefox','/.mozilla/firefox/installs.ini','/.mozilla/firefox/profiles.ini','/.mozilla/firefox/*.personal-backup/***'} \
                --include={'/.config','/.config/BraveSoftware','/.config/BraveSoftware/Brave-Browser-backup/***'} \
                --include={'/Desktop/***','/Documents/***','/Downloads/***','/Music/***','/Pictures/***','/Videos/***'} \
                --include={'/Workspace','/Workspace/Books/***','/Workspace/Private/***','/Workspace/Work/***'} \
                --include={'/Workspace/Public','/Workspace/Public/Projects/***'} \
                --exclude='*' "$1" "$2"
        else
            echo "Aborted by user..."
        fi
    else
        echo "Either $1 or $2 does not end with '/', exiting..."
    fi
}

function restore() {
    if pgrep -x brave >/dev/null; then
        echo ">>> Brave Browser is running. Close it and try again..."
        exit 1
    fi

    if pgrep -x firefox >/dev/null; then
        echo ">>> Firefox is running. Close it and try again..."
        exit 1
    fi

    if [ -z "$1" ] || [ ! -d "$1" ]; then
        echo "Illegal arguments ($1 must exists and be a directory)"
        echo "  Usage: ./backup restore <Home Folder> <USB Folder>"
        echo "    e.g: ./backup restore $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [ -z "$2" ] || [ ! -d "$2" ]; then
        echo "Illegal arguments ($2 must exists and be a directory)"
        echo "  Usage: ./backup restore <Home Folder> <USB Folder>"
        echo "    e.g: ./backup restore $HOME/ /run/media/$USER/NAME_OR_UUID_BACKUP_DRIVE/$USER/"
        exit 1
    fi

    if [[ $1 == */ ]] && [[ $2 == */ ]]; then # * is used for pattern matching
        if ask "Restoring $2 to $1, continue?"; then
            echo "Stopping psd.service to execute the restore..."
            systemctl --user stop psd.service
            sleep 1

            rm -rf "{HOME}/.mozilla"
            rm -rf "{HOME}/.config/BraveSoftware"

            echo "Restoring $2 to $1..."
            rsync -uazh --quiet "$2" "$1"

            echo "Restoring Firefox Browser backup..."
            local FIREFOX_PROFILE
            FIREFOX_PROFILE=$(firefox_profile)
            if [ -z "${FIREFOX_PROFILE}" ]; then
                echo ">>> Didn't found Firefox profile, skipping Firefox restore..."
            else
                if [ -d "${HOME}/.mozilla" ]; then
                    if [ -d "${HOME}/.mozilla/firefox" ]; then
                        mv "${HOME}/.mozilla/firefox/${FIREFOX_PROFILE}-backup" "${HOME}/.mozilla/firefox/${FIREFOX_PROFILE}"
                    fi
                fi
            fi

            echo "Restoring Brave Browser backup..."
            if [ -d "${HOME}/.config/BraveSoftware" ]; then
                if [ -d "${HOME}/.config/BraveSoftware/Brave-Browser" ]; then
                    rm -rf "{HOME}/.config/BraveSoftware/Brave-Browser"
                fi

                if [ -d "${HOME}/.config/BraveSoftware/Brave-Browser-backup" ]; then
                    mv "${HOME}/.config/BraveSoftware/Brave-Browser-backup" "${HOME}/.config/BraveSoftware/Brave-Browser"
                fi
            fi

            echo "Starting psd.service..."
            systemctl --user start psd.service
            sleep 1
        else
            echo "Aborted by user..."
        fi
    else
        echo "Either $1 or $2 does not end with '/', exiting..."
    fi
}

if [ "$#" -eq 0 ]; then
    echo "Illegal number of arguments (at least 1 expected)"
    echo "Usage: ./backup <init|backup|restore> ..."
    exit 1
fi

function process() {
    if [ "$1" = "init" ]; then
        init "$2"
    elif [ "$1" = "backup" ]; then
        backup "$2" "$3"
    elif [ "$1" = "restore" ]; then
        restore"$2" "$3"
    else
        echo "Illegal argument"
        echo "Usage: ./backup <init|backup|restore ..."
    fi
}

process "$1" "$2" "$3"
