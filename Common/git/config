[user]
    name = Julio C. Villasante
    email = jvillasantegomez@gmail.com
    signingkey = ~/.ssh/id_rsa.pub

[github]
    user = jvillasante

[includeIf "gitdir:~/Workspace/Work/"]
    path = ~/Workspace/Work/.gitconfig
    # https://git-scm.com/docs/git-config#_includes

[url "git@github.com:"]
    insteadOf = "https://github.com/"
    # prefer ssh clone over https on github

[alias]
    prune = fetch --prune
    # Because I constantly forget how to do this
    # https://git-scm.com/docs/git-fetch#git-fetch--p

    undo = reset --soft HEAD^
    # Not quite as common as an amend, but still common
    # https://git-scm.com/docs/git-reset#git-reset-emgitresetemltmodegtltcommitgt

    stash-all = stash save --include-untracked
    # We wanna grab those pesky un-added files!
    # https://git-scm.com/docs/git-stash

    glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    # No need for a GUI - a nice, colorful, graphical representation
    # https://git-scm.com/docs/git-log
    # via https://medium.com/@payload.dd/thanks-for-the-git-st-i-will-use-this-4da5839a21a4

[init]
    defaultBranch = main
    # Create a main branch instead of a master branch when creating a new repo.
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-initdefaultBranch

[branch]
    sort = -committerdate
    # Makes git branch sort by most recently used branches instead of alphabetical
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-branchsort

[commit]
    # template = ~/.config/git/commit_template
    # Specify the pathname of a file to use as the template for new commit messages.
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-committemplate

    cleanup = strip
    # Strip leading and trailing empty lines, trailing whitespace, commentary and collapse consecutive empty lines.
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-commitcleanup

    # verbose = true
    # This adds the whole commit diff in the text editor where youâ€™re writing your commit message, to help you remember what you were doing.
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-commitverbose

[diff]
    algorithm = histogram
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-diffalgorithm

    colormoved = "default"
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-diffcolorMoved

    colormovedws = "allow-indentation-change"
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-diffcolorMovedWS

[rebase]
    autosquash = true
    # Enable --autosquash option by default.
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-rebaseautoSquash

    # autostash = true
    # Automatically runs git stash before a git rebase and git stash pop after.
    # NOTE: The final stash application after a successful rebase might result in non-trivial conflicts!
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-mergeautoStash

[merge]
    # ff = only
    # I pretty much never mean to do a real merge, since I use a rebase workflow.
    # Note: this global option applies to all merges, including those done during a git pull
    # https://git-scm.com/docs/git-config#git-config-mergeff

    conflictstyle = zdiff3
    # Standard diff is two sets of final changes. This introduces the original text before each side's changes.
    # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle

[push]
    default = current
    # Push the current branch to update a branch with the same name on the receiving end.
    # NOTE: Make sure you're never going to make a local branch with the same name as an unrelated remote branch.
    # https://git-scm.com/docs/git-config#git-config-pushdefault

    followTags = true
    # Because I get sick of telling git to do it manually
    # https://git-scm.com/docs/git-config#git-config-pushfollowTags

[pull]
    ff = only
    # Avoid accidentally creating a merge commit when you run git pull on a branch where the upstream branch has diverged.
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-pullff

[status]
    showUntrackedFiles = all
    # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
    # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles

[transfer]
    fsckobjects = true
    # To combat repository corruption!
    # Note: this global option applies during receive and transmit
    # https://git-scm.com/docs/git-config#git-config-transferfsckObjects
    # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
